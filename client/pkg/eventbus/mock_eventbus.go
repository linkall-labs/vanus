// Code generated by MockGen. DO NOT EDIT.
// Source: eventbus.go

// Package eventbus is a generated GoMock package.
package eventbus

import (
	context "context"
	reflect "reflect"

	v2 "github.com/cloudevents/sdk-go/v2"
	gomock "github.com/golang/mock/gomock"
	discovery "github.com/linkall-labs/vanus/client/pkg/discovery"
)

// MockEventBus is a mock of EventBus interface.
type MockEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusMockRecorder
}

// MockEventBusMockRecorder is the mock recorder for MockEventBus.
type MockEventBusMockRecorder struct {
	mock *MockEventBus
}

// NewMockEventBus creates a new mock instance.
func NewMockEventBus(ctrl *gomock.Controller) *MockEventBus {
	mock := &MockEventBus{ctrl: ctrl}
	mock.recorder = &MockEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBus) EXPECT() *MockEventBusMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockEventBus) Acquire() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Acquire")
}

// Acquire indicates an expected call of Acquire.
func (mr *MockEventBusMockRecorder) Acquire() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockEventBus)(nil).Acquire))
}

// Close mocks base method.
func (m *MockEventBus) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockEventBusMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventBus)(nil).Close))
}

// Release mocks base method.
func (m *MockEventBus) Release() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockEventBusMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockEventBus)(nil).Release))
}

// UseCount mocks base method.
func (m *MockEventBus) UseCount() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseCount")
	ret0, _ := ret[0].(int32)
	return ret0
}

// UseCount indicates an expected call of UseCount.
func (mr *MockEventBusMockRecorder) UseCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseCount", reflect.TypeOf((*MockEventBus)(nil).UseCount))
}

// VRN mocks base method.
func (m *MockEventBus) VRN() *discovery.VRN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VRN")
	ret0, _ := ret[0].(*discovery.VRN)
	return ret0
}

// VRN indicates an expected call of VRN.
func (mr *MockEventBusMockRecorder) VRN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VRN", reflect.TypeOf((*MockEventBus)(nil).VRN))
}

// Writer mocks base method.
func (m *MockEventBus) Writer() (BusWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Writer")
	ret0, _ := ret[0].(BusWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Writer indicates an expected call of Writer.
func (mr *MockEventBusMockRecorder) Writer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writer", reflect.TypeOf((*MockEventBus)(nil).Writer))
}

// MockBusWriter is a mock of BusWriter interface.
type MockBusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockBusWriterMockRecorder
}

// MockBusWriterMockRecorder is the mock recorder for MockBusWriter.
type MockBusWriterMockRecorder struct {
	mock *MockBusWriter
}

// NewMockBusWriter creates a new mock instance.
func NewMockBusWriter(ctrl *gomock.Controller) *MockBusWriter {
	mock := &MockBusWriter{ctrl: ctrl}
	mock.recorder = &MockBusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusWriter) EXPECT() *MockBusWriterMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockBusWriter) Append(ctx context.Context, event *v2.Event) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, event)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append.
func (mr *MockBusWriterMockRecorder) Append(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockBusWriter)(nil).Append), ctx, event)
}

// Bus mocks base method.
func (m *MockBusWriter) Bus() EventBus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bus")
	ret0, _ := ret[0].(EventBus)
	return ret0
}

// Bus indicates an expected call of Bus.
func (mr *MockBusWriterMockRecorder) Bus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bus", reflect.TypeOf((*MockBusWriter)(nil).Bus))
}

// Close mocks base method.
func (m *MockBusWriter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBusWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBusWriter)(nil).Close))
}

// WithPicker mocks base method.
func (m *MockBusWriter) WithPicker(picker WriterPicker) BusWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPicker", picker)
	ret0, _ := ret[0].(BusWriter)
	return ret0
}

// WithPicker indicates an expected call of WithPicker.
func (mr *MockBusWriterMockRecorder) WithPicker(picker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPicker", reflect.TypeOf((*MockBusWriter)(nil).WithPicker), picker)
}
