// Code generated by MockGen. DO NOT EDIT.
// Source: eventlog.go

// Package eventlog is a generated GoMock package.
package eventlog

import (
	context "context"
	reflect "reflect"

	v2 "github.com/cloudevents/sdk-go/v2"
	gomock "github.com/golang/mock/gomock"
	discovery "github.com/linkall-labs/vanus/client/pkg/discovery"
)

// MockEventLog is a mock of EventLog interface.
type MockEventLog struct {
	ctrl     *gomock.Controller
	recorder *MockEventLogMockRecorder
}

// MockEventLogMockRecorder is the mock recorder for MockEventLog.
type MockEventLogMockRecorder struct {
	mock *MockEventLog
}

// NewMockEventLog creates a new mock instance.
func NewMockEventLog(ctrl *gomock.Controller) *MockEventLog {
	mock := &MockEventLog{ctrl: ctrl}
	mock.recorder = &MockEventLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventLog) EXPECT() *MockEventLogMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockEventLog) Acquire() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Acquire")
}

// Acquire indicates an expected call of Acquire.
func (mr *MockEventLogMockRecorder) Acquire() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockEventLog)(nil).Acquire))
}

// Close mocks base method.
func (m *MockEventLog) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockEventLogMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventLog)(nil).Close))
}

// Reader mocks base method.
func (m *MockEventLog) Reader() (LogReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reader")
	ret0, _ := ret[0].(LogReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reader indicates an expected call of Reader.
func (mr *MockEventLogMockRecorder) Reader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockEventLog)(nil).Reader))
}

// Release mocks base method.
func (m *MockEventLog) Release() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockEventLogMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockEventLog)(nil).Release))
}

// UseCount mocks base method.
func (m *MockEventLog) UseCount() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseCount")
	ret0, _ := ret[0].(int32)
	return ret0
}

// UseCount indicates an expected call of UseCount.
func (mr *MockEventLogMockRecorder) UseCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseCount", reflect.TypeOf((*MockEventLog)(nil).UseCount))
}

// VRN mocks base method.
func (m *MockEventLog) VRN() *discovery.VRN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VRN")
	ret0, _ := ret[0].(*discovery.VRN)
	return ret0
}

// VRN indicates an expected call of VRN.
func (mr *MockEventLogMockRecorder) VRN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VRN", reflect.TypeOf((*MockEventLog)(nil).VRN))
}

// Writer mocks base method.
func (m *MockEventLog) Writer() (LogWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Writer")
	ret0, _ := ret[0].(LogWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Writer indicates an expected call of Writer.
func (mr *MockEventLogMockRecorder) Writer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writer", reflect.TypeOf((*MockEventLog)(nil).Writer))
}

// MockLogWriter is a mock of LogWriter interface.
type MockLogWriter struct {
	ctrl     *gomock.Controller
	recorder *MockLogWriterMockRecorder
}

// MockLogWriterMockRecorder is the mock recorder for MockLogWriter.
type MockLogWriterMockRecorder struct {
	mock *MockLogWriter
}

// NewMockLogWriter creates a new mock instance.
func NewMockLogWriter(ctrl *gomock.Controller) *MockLogWriter {
	mock := &MockLogWriter{ctrl: ctrl}
	mock.recorder = &MockLogWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogWriter) EXPECT() *MockLogWriterMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockLogWriter) Append(ctx context.Context, event *v2.Event) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, event)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append.
func (mr *MockLogWriterMockRecorder) Append(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockLogWriter)(nil).Append), ctx, event)
}

// Close mocks base method.
func (m *MockLogWriter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockLogWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogWriter)(nil).Close))
}

// Log mocks base method.
func (m *MockLogWriter) Log() EventLog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(EventLog)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockLogWriterMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogWriter)(nil).Log))
}

// MockLogReader is a mock of LogReader interface.
type MockLogReader struct {
	ctrl     *gomock.Controller
	recorder *MockLogReaderMockRecorder
}

// MockLogReaderMockRecorder is the mock recorder for MockLogReader.
type MockLogReaderMockRecorder struct {
	mock *MockLogReader
}

// NewMockLogReader creates a new mock instance.
func NewMockLogReader(ctrl *gomock.Controller) *MockLogReader {
	mock := &MockLogReader{ctrl: ctrl}
	mock.recorder = &MockLogReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogReader) EXPECT() *MockLogReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLogReader) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockLogReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogReader)(nil).Close))
}

// Log mocks base method.
func (m *MockLogReader) Log() EventLog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(EventLog)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockLogReaderMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogReader)(nil).Log))
}

// Read mocks base method.
func (m *MockLogReader) Read(ctx context.Context, size int16) ([]*v2.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, size)
	ret0, _ := ret[0].([]*v2.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockLogReaderMockRecorder) Read(ctx, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockLogReader)(nil).Read), ctx, size)
}

// Seek mocks base method.
func (m *MockLogReader) Seek(ctx context.Context, offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", ctx, offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockLogReaderMockRecorder) Seek(ctx, offset, whence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockLogReader)(nil).Seek), ctx, offset, whence)
}
