apiVersion: v1
kind: Namespace
metadata:
  name: vanus
---
apiVersion: v1
data:
  controller.yaml: |-
    name: ${POD_NAME}
    ip: ${POD_IP}
    port: 2048
    grpc_reflection_enable: true
    gateway_endpoint: http://192.168.49.2:30001
    etcd:
      - vanus-controller-0.vanus-controller.vanus.svc:2379
      - vanus-controller-1.vanus-controller.vanus.svc:2379
      - vanus-controller-2.vanus-controller.vanus.svc:2379
    data_dir: /data
    replicas: 3
    metadata:
      key_prefix: /vanus
    topology:
      vanus-controller-0: vanus-controller-0.vanus-controller.vanus.svc:2048
      vanus-controller-1: vanus-controller-1.vanus-controller.vanus.svc:2048
      vanus-controller-2: vanus-controller-2.vanus-controller.vanus.svc:2048
    embed_etcd:
      # relative path to ${data_dir} above
      data_dir: etcd/data
      client_addr: ${POD_IP}:2379
      peer_addr: ${POD_IP}:2380
      clusters:
        - vanus-controller-0=http://vanus-controller-0.vanus-controller.vanus.svc:2380
        - vanus-controller-1=http://vanus-controller-1.vanus-controller.vanus.svc:2380
        - vanus-controller-2=http://vanus-controller-2.vanus-controller.vanus.svc:2380
kind: ConfigMap
metadata:
  name: config-controller
  namespace: vanus
---
apiVersion: v1
data:
  gateway.yaml: |-
    port: 8080
    controllers:
      - vanus-controller-0.vanus-controller.vanus.svc:2048
      - vanus-controller-1.vanus-controller.vanus.svc:2048
      - vanus-controller-2.vanus-controller.vanus.svc:2048
kind: ConfigMap
metadata:
  name: config-gateway
  namespace: vanus
---
apiVersion: v1
data:
  store.yaml: |-
    port: 11811
    ip : ${POD_IP}
    controllers:
      - vanus-controller-0.vanus-controller.vanus.svc:2048
      - vanus-controller-1.vanus-controller.vanus.svc:2048
      - vanus-controller-2.vanus-controller.vanus.svc:2048
    volume:
      id: ${VOLUME_ID}
      dir: /data
      capacity: 1073741824
kind: ConfigMap
metadata:
  name: config-store
  namespace: vanus
---
apiVersion: v1
data:
  trigger.yaml: "port: 2148\nip : ${POD_IP}\ncontrollers:\n  - vanus-controller-0.vanus-controller.vanus.svc:2048\n
    \ - vanus-controller-1.vanus-controller.vanus.svc:2048\n  - vanus-controller-2.vanus-controller.vanus.svc:2048\n
    \ "
kind: ConfigMap
metadata:
  name: config-trigger
  namespace: vanus
---
apiVersion: v1
kind: Service
metadata:
  name: vanus-controller
  namespace: vanus
spec:
  clusterIP: None
  ports:
  - name: vanus-controller
    port: 2048
  selector:
    app: vanus-controller
---
apiVersion: v1
kind: Service
metadata:
  name: vanus-controller-0
  namespace: vanus
spec:
  ports:
  - name: controller-grpc
    nodePort: 32000
    port: 2048
  selector:
    statefulset.kubernetes.io/pod-name: vanus-controller-0
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  name: vanus-controller-1
  namespace: vanus
spec:
  ports:
  - name: controller-grpc
    nodePort: 32100
    port: 2048
  selector:
    statefulset.kubernetes.io/pod-name: vanus-controller-1
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  name: vanus-controller-2
  namespace: vanus
spec:
  ports:
  - name: controller-grpc
    nodePort: 32200
    port: 2048
  selector:
    statefulset.kubernetes.io/pod-name: vanus-controller-2
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  name: vanus-gateway
  namespace: vanus
spec:
  ports:
  - name: vanus-gateway
    nodePort: 30001
    port: 8080
    targetPort: 8080
  - name: vanus-gateway-http
    nodePort: 30002
    port: 8081
    targetPort: 8081
  selector:
    app: vanus-gateway
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vanus-gateway
  name: vanus-gateway
  namespace: vanus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vanus-gateway
  template:
    metadata:
      labels:
        app: vanus-gateway
    spec:
      containers:
      - image: public.ecr.aws/vanus/gateway:v0.0.5
        imagePullPolicy: Always
        name: gateway
        ports:
        - containerPort: 8080
          name: http
        volumeMounts:
        - mountPath: /server/config
          name: config-gateway
      volumes:
      - configMap:
          name: config-gateway
        name: config-gateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vanus-trigger
  name: vanus-trigger
  namespace: vanus
spec:
  replicas: 2
  selector:
    matchLabels:
      app: vanus-trigger
  template:
    metadata:
      labels:
        app: vanus-trigger
    spec:
      containers:
      - env:
        - name: VANUS_LOG_LEVEL
          value: DEBUG
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: public.ecr.aws/vanus/trigger:v0.0.5
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          grpc:
            port: 2148
          periodSeconds: 2
        name: trigger
        ports:
        - containerPort: 2148
          name: grpc
        volumeMounts:
        - mountPath: /server/config
          name: config-trigger
      volumes:
      - configMap:
          name: config-trigger
        name: config-trigger
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: vanus-controller
  name: vanus-controller
  namespace: vanus
spec:
  replicas: 3
  selector:
    matchLabels:
      app: vanus-controller
  serviceName: vanus-controller
  template:
    metadata:
      labels:
        app: vanus-controller
    spec:
      containers:
      - env:
        - name: VANUS_LOG_LEVEL
          value: DEBUG
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: public.ecr.aws/vanus/controller:v0.0.5
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          grpc:
            port: 2048
          periodSeconds: 2
        name: controller
        ports:
        - containerPort: 2048
          name: grpc
        - containerPort: 2379
          name: etcd-client
        - containerPort: 2380
          name: etcd-peer
        volumeMounts:
        - mountPath: /server/config
          name: config-controller
        - mountPath: /data
          name: data
      volumes:
      - configMap:
          name: config-controller
        name: config-controller
  volumeClaimTemplates:
  - metadata:
      labels:
        app: vanus-controller
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: vanus-store
  name: vanus-store
  namespace: vanus
spec:
  replicas: 3
  selector:
    matchLabels:
      app: vanus-store
  serviceName: vanus-store
  template:
    metadata:
      labels:
        app: vanus-store
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - export VOLUME_ID=${HOSTNAME##*-}; /server/bin/store
        env:
        - name: VANUS_LOG_LEVEL
          value: DEBUG
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: public.ecr.aws/vanus/store:v0.0.5
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          grpc:
            port: 11811
          periodSeconds: 2
        name: store
        ports:
        - containerPort: 11811
          name: grpc
        volumeMounts:
        - mountPath: /server/config
          name: config-store
        - mountPath: /data
          name: data
      volumes:
      - configMap:
          name: config-store
        name: config-store
  volumeClaimTemplates:
  - metadata:
      labels:
        app: vanus-controller
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
