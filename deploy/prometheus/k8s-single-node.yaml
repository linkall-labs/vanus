apiVersion: v1
kind: ConfigMap
metadata:
  name: config-prometheus
  namespace: vanus
data:
  prometheus.yml: |
    # my global config
    global:
      scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).
    
    # Alertmanager configuration
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              # - alertmanager:9093
    
    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
    # - "first_rules.yml"
    # - "second_rules.yml"
    
    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'prometheus'
    
        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.
    
        static_configs:
          - targets: ['localhost:9090']
    
      - job_name: 'vanus'
        static_configs:
          - targets: ['vanus-controller-0:2112','vanus-controller-1:2112','vanus-controller-2:2112']
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vanus-prometheus
  name: vanus-prometheus
  namespace: vanus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vanus-prometheus
  template:
    metadata:
      labels:
        app: vanus-prometheus
    spec:
      containers:
      - image: prom/prometheus
        imagePullPolicy: Always
        name: prometheus
        ports:
          - containerPort: 9090
            name: prometheus
        volumeMounts:
          - mountPath: /etc/prometheus
            name: config-prometheus
      volumes:
        - configMap:
            name: config-prometheus
          name: config-prometheus
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vanus-prometheus
  name: vanus-prometheus
  namespace: vanus
spec:
  clusterIP: None
  ports:
  - name: vanus-prometheus
    port: 9090
  selector:
    app: vanus-prometheus
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vanus-grafana
  name: vanus-grafana
  namespace: vanus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vanus-grafana
  template:
    metadata:
      labels:
        app: vanus-grafana
    spec:
      containers:
        - image: grafana/grafana
          imagePullPolicy: Always
          name: grafana
          ports:
          - containerPort: 3000
            name: grafana
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vanus-grafana
  name: vanus-grafana
  namespace: vanus
spec:
  type: NodePort
  ports:
    - name: vanus-grafana
      nodePort: 30300
      port: 3000
      targetPort: 3000
  selector:
    app: vanus-grafana