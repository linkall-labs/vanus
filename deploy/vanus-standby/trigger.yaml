apiVersion: v1
data:
  trigger.yaml: |-
    port: 2148
    ip : ${POD_IP}
    send_event_goroutine_size: 1000
    controllers:
      - vanus-controller-0.vanus-controller.vanus-standby.svc:2048
      - vanus-controller-1.vanus-controller.vanus-standby.svc:2048
    observability:
      metrics:
        enable: true
      tracing:
        enable: false
        # OpenTelemetry Collector endpoint, https://opentelemetry.io/docs/collector/getting-started/
        otel_collector: http://127.0.0.1:4318
kind: ConfigMap
metadata:
  name: config-trigger
  namespace: vanus-standby
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vanus-trigger
  name: vanus-trigger
  namespace: vanus-standby
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vanus-trigger
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        vanus.dev/metrics.port: "2112"
      labels:
        app: vanus-trigger
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: core.vanus.ai/dedicated
                operator: In
                values:
                - core
      tolerations:
      - key: "core.vanus.ai/dedicated"
        operator: "Equal"
        value: "core"
        effect: "NoSchedule"
      containers:
      - env:
        - name: VANUS_LOG_LEVEL
          value: INFO
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: public.ecr.aws/vanus/trigger:d03f5ed
        imagePullPolicy: IfNotPresent
        name: trigger
        ports:
        - containerPort: 2148
          name: grpc
        volumeMounts:
        - mountPath: /vanus/config
          name: config-trigger
      volumes:
      - configMap:
          name: config-trigger
        name: config-trigger
