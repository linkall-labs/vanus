// Code generated by MockGen. DO NOT EDIT.
// Source: persistence.go

// Package secret is a generated GoMock package.
package secret

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "github.com/linkall-labs/vanus/internal/primitive"
	vanus "github.com/linkall-labs/vanus/internal/primitive/vanus"
)

// MockPersistence is a mock of Persistence interface.
type MockPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockPersistenceMockRecorder
}

// MockPersistenceMockRecorder is the mock recorder for MockPersistence.
type MockPersistenceMockRecorder struct {
	mock *MockPersistence
}

// NewMockPersistence creates a new mock instance.
func NewMockPersistence(ctrl *gomock.Controller) *MockPersistence {
	mock := &MockPersistence{ctrl: ctrl}
	mock.recorder = &MockPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistence) EXPECT() *MockPersistenceMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockPersistence) Read(ctx context.Context, subscriptionID vanus.ID) (primitive.SinkCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, subscriptionID)
	ret0, _ := ret[0].(primitive.SinkCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockPersistenceMockRecorder) Read(ctx, subscriptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPersistence)(nil).Read), ctx, subscriptionID)
}

// Write mocks base method.
func (m *MockPersistence) Write(ctx context.Context, subscriptionID vanus.ID, credential primitive.SinkCredential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, subscriptionID, credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockPersistenceMockRecorder) Write(ctx, subscriptionID, credential interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockPersistence)(nil).Write), ctx, subscriptionID, credential)
}
