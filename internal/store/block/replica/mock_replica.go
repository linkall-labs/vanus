// Code generated by MockGen. DO NOT EDIT.
// Source: replica.go

// Package replica is a generated GoMock package.
package replica

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	block "github.com/linkall-labs/vanus/internal/store/block"
	meta "github.com/linkall-labs/vanus/proto/pkg/meta"
	raftpb "github.com/linkall-labs/vanus/raft/raftpb"
)

// MockReplica is a mock of Replica interface.
type MockReplica struct {
	ctrl     *gomock.Controller
	recorder *MockReplicaMockRecorder
}

// MockReplicaMockRecorder is the mock recorder for MockReplica.
type MockReplicaMockRecorder struct {
	mock *MockReplica
}

// NewMockReplica creates a new mock instance.
func NewMockReplica(ctrl *gomock.Controller) *MockReplica {
	mock := &MockReplica{ctrl: ctrl}
	mock.recorder = &MockReplicaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplica) EXPECT() *MockReplicaMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockReplica) Append(ctx context.Context, entries ...block.Entry) ([]block.Entry, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range entries {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Append", varargs...)
	ret0, _ := ret[0].([]block.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append.
func (mr *MockReplicaMockRecorder) Append(ctx interface{}, entries ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, entries...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockReplica)(nil).Append), varargs...)
}

// Bootstrap mocks base method.
func (m *MockReplica) Bootstrap(blocks []Peer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap", blocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockReplicaMockRecorder) Bootstrap(blocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockReplica)(nil).Bootstrap), blocks)
}

// Delete mocks base method.
func (m *MockReplica) Delete(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx)
}

// Delete indicates an expected call of Delete.
func (mr *MockReplicaMockRecorder) Delete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReplica)(nil).Delete), ctx)
}

// FillClusterInfo mocks base method.
func (m *MockReplica) FillClusterInfo(info *meta.SegmentHealthInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FillClusterInfo", info)
}

// FillClusterInfo indicates an expected call of FillClusterInfo.
func (mr *MockReplicaMockRecorder) FillClusterInfo(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillClusterInfo", reflect.TypeOf((*MockReplica)(nil).FillClusterInfo), info)
}

// Receive mocks base method.
func (m *MockReplica) Receive(ctx context.Context, msg *raftpb.Message, from uint64, endpoint string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Receive", ctx, msg, from, endpoint)
}

// Receive indicates an expected call of Receive.
func (mr *MockReplicaMockRecorder) Receive(ctx, msg, from, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockReplica)(nil).Receive), ctx, msg, from, endpoint)
}

// Stop mocks base method.
func (m *MockReplica) Stop(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", ctx)
}

// Stop indicates an expected call of Stop.
func (mr *MockReplicaMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockReplica)(nil).Stop), ctx)
}
