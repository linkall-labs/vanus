// Code generated by MockGen. DO NOT EDIT.
// Source: replica.go

// Package segment is a generated GoMock package.
package segment

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vanus "github.com/linkall-labs/vanus/internal/primitive/vanus"
	block "github.com/linkall-labs/vanus/internal/store/block"
	raft "github.com/linkall-labs/vanus/internal/store/block/raft"
	meta "github.com/linkall-labs/vanus/proto/pkg/meta"
)

// MockReplica is a mock of Replica interface.
type MockReplica struct {
	ctrl     *gomock.Controller
	recorder *MockReplicaMockRecorder
}

// MockReplicaMockRecorder is the mock recorder for MockReplica.
type MockReplicaMockRecorder struct {
	mock *MockReplica
}

// NewMockReplica creates a new mock instance.
func NewMockReplica(ctrl *gomock.Controller) *MockReplica {
	mock := &MockReplica{ctrl: ctrl}
	mock.recorder = &MockReplicaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplica) EXPECT() *MockReplicaMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockReplica) Append(ctx context.Context, entries ...block.Entry) ([]int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range entries {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Append", varargs...)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append.
func (mr *MockReplicaMockRecorder) Append(ctx interface{}, entries ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, entries...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockReplica)(nil).Append), varargs...)
}

// Bootstrap mocks base method.
func (m *MockReplica) Bootstrap(ctx context.Context, blocks []raft.Peer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap", ctx, blocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockReplicaMockRecorder) Bootstrap(ctx, blocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockReplica)(nil).Bootstrap), ctx, blocks)
}

// Close mocks base method.
func (m *MockReplica) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReplicaMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReplica)(nil).Close), ctx)
}

// Delete mocks base method.
func (m *MockReplica) Delete(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReplicaMockRecorder) Delete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReplica)(nil).Delete), ctx)
}

// ID mocks base method.
func (m *MockReplica) ID() vanus.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(vanus.ID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockReplicaMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockReplica)(nil).ID))
}

// IDStr mocks base method.
func (m *MockReplica) IDStr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDStr")
	ret0, _ := ret[0].(string)
	return ret0
}

// IDStr indicates an expected call of IDStr.
func (mr *MockReplicaMockRecorder) IDStr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDStr", reflect.TypeOf((*MockReplica)(nil).IDStr))
}

// Read mocks base method.
func (m *MockReplica) Read(ctx context.Context, seq int64, num int) ([]block.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, seq, num)
	ret0, _ := ret[0].([]block.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReplicaMockRecorder) Read(ctx, seq, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReplica)(nil).Read), ctx, seq, num)
}

// Status mocks base method.
func (m *MockReplica) Status() *meta.SegmentHealthInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(*meta.SegmentHealthInfo)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockReplicaMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockReplica)(nil).Status))
}
