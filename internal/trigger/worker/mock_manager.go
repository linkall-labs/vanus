// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package worker is a generated GoMock package.
package worker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "github.com/linkall-labs/vanus/internal/primitive"
	info "github.com/linkall-labs/vanus/internal/primitive/info"
	vanus "github.com/linkall-labs/vanus/internal/primitive/vanus"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddSubscription mocks base method.
func (m *MockManager) AddSubscription(ctx context.Context, subscription *primitive.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubscription", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockManagerMockRecorder) AddSubscription(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockManager)(nil).AddSubscription), ctx, subscription)
}

// ListSubscriptionInfo mocks base method.
func (m *MockManager) ListSubscriptionInfo() ([]info.SubscriptionInfo, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionInfo")
	ret0, _ := ret[0].([]info.SubscriptionInfo)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// ListSubscriptionInfo indicates an expected call of ListSubscriptionInfo.
func (mr *MockManagerMockRecorder) ListSubscriptionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionInfo", reflect.TypeOf((*MockManager)(nil).ListSubscriptionInfo))
}

// PauseSubscription mocks base method.
func (m *MockManager) PauseSubscription(ctx context.Context, id vanus.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseSubscription", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseSubscription indicates an expected call of PauseSubscription.
func (mr *MockManagerMockRecorder) PauseSubscription(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseSubscription", reflect.TypeOf((*MockManager)(nil).PauseSubscription), ctx, id)
}

// RemoveSubscription mocks base method.
func (m *MockManager) RemoveSubscription(ctx context.Context, id vanus.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSubscription", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSubscription indicates an expected call of RemoveSubscription.
func (mr *MockManagerMockRecorder) RemoveSubscription(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubscription", reflect.TypeOf((*MockManager)(nil).RemoveSubscription), ctx, id)
}

// ResetOffsetToTimestamp mocks base method.
func (m *MockManager) ResetOffsetToTimestamp(ctx context.Context, id vanus.ID, timestamp int64) (info.ListOffsetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetOffsetToTimestamp", ctx, id, timestamp)
	ret0, _ := ret[0].(info.ListOffsetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetOffsetToTimestamp indicates an expected call of ResetOffsetToTimestamp.
func (mr *MockManagerMockRecorder) ResetOffsetToTimestamp(ctx, id, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetOffsetToTimestamp", reflect.TypeOf((*MockManager)(nil).ResetOffsetToTimestamp), ctx, id, timestamp)
}

// Start mocks base method.
func (m *MockManager) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockManagerMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManager)(nil).Start), ctx)
}

// StartSubscription mocks base method.
func (m *MockManager) StartSubscription(ctx context.Context, id vanus.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSubscription", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSubscription indicates an expected call of StartSubscription.
func (mr *MockManagerMockRecorder) StartSubscription(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSubscription", reflect.TypeOf((*MockManager)(nil).StartSubscription), ctx, id)
}

// Stop mocks base method.
func (m *MockManager) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockManagerMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockManager)(nil).Stop), ctx)
}
