// Code generated by MockGen. DO NOT EDIT.
// Source: controller_grpc.pb.go

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	meta "github.com/vanus-labs/vanus/proto/pkg/meta"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// MockPingServerClient is a mock of PingServerClient interface.
type MockPingServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockPingServerClientMockRecorder
}

// MockPingServerClientMockRecorder is the mock recorder for MockPingServerClient.
type MockPingServerClientMockRecorder struct {
	mock *MockPingServerClient
}

// NewMockPingServerClient creates a new mock instance.
func NewMockPingServerClient(ctrl *gomock.Controller) *MockPingServerClient {
	mock := &MockPingServerClient{ctrl: ctrl}
	mock.recorder = &MockPingServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingServerClient) EXPECT() *MockPingServerClientMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPingServerClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockPingServerClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPingServerClient)(nil).Ping), varargs...)
}

// MockPingServerServer is a mock of PingServerServer interface.
type MockPingServerServer struct {
	ctrl     *gomock.Controller
	recorder *MockPingServerServerMockRecorder
}

// MockPingServerServerMockRecorder is the mock recorder for MockPingServerServer.
type MockPingServerServerMockRecorder struct {
	mock *MockPingServerServer
}

// NewMockPingServerServer creates a new mock instance.
func NewMockPingServerServer(ctrl *gomock.Controller) *MockPingServerServer {
	mock := &MockPingServerServer{ctrl: ctrl}
	mock.recorder = &MockPingServerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingServerServer) EXPECT() *MockPingServerServerMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPingServerServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*PingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockPingServerServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPingServerServer)(nil).Ping), arg0, arg1)
}

// MockUnsafePingServerServer is a mock of UnsafePingServerServer interface.
type MockUnsafePingServerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePingServerServerMockRecorder
}

// MockUnsafePingServerServerMockRecorder is the mock recorder for MockUnsafePingServerServer.
type MockUnsafePingServerServerMockRecorder struct {
	mock *MockUnsafePingServerServer
}

// NewMockUnsafePingServerServer creates a new mock instance.
func NewMockUnsafePingServerServer(ctrl *gomock.Controller) *MockUnsafePingServerServer {
	mock := &MockUnsafePingServerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePingServerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePingServerServer) EXPECT() *MockUnsafePingServerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPingServerServer mocks base method.
func (m *MockUnsafePingServerServer) mustEmbedUnimplementedPingServerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPingServerServer")
}

// mustEmbedUnimplementedPingServerServer indicates an expected call of mustEmbedUnimplementedPingServerServer.
func (mr *MockUnsafePingServerServerMockRecorder) mustEmbedUnimplementedPingServerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPingServerServer", reflect.TypeOf((*MockUnsafePingServerServer)(nil).mustEmbedUnimplementedPingServerServer))
}

// MockEventbusControllerClient is a mock of EventbusControllerClient interface.
type MockEventbusControllerClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventbusControllerClientMockRecorder
}

// MockEventbusControllerClientMockRecorder is the mock recorder for MockEventbusControllerClient.
type MockEventbusControllerClientMockRecorder struct {
	mock *MockEventbusControllerClient
}

// NewMockEventbusControllerClient creates a new mock instance.
func NewMockEventbusControllerClient(ctrl *gomock.Controller) *MockEventbusControllerClient {
	mock := &MockEventbusControllerClient{ctrl: ctrl}
	mock.recorder = &MockEventbusControllerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventbusControllerClient) EXPECT() *MockEventbusControllerClientMockRecorder {
	return m.recorder
}

// CreateEventbus mocks base method.
func (m *MockEventbusControllerClient) CreateEventbus(ctx context.Context, in *CreateEventbusRequest, opts ...grpc.CallOption) (*meta.Eventbus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEventbus", varargs...)
	ret0, _ := ret[0].(*meta.Eventbus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventbus indicates an expected call of CreateEventbus.
func (mr *MockEventbusControllerClientMockRecorder) CreateEventbus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventbus", reflect.TypeOf((*MockEventbusControllerClient)(nil).CreateEventbus), varargs...)
}

// CreateSystemEventbus mocks base method.
func (m *MockEventbusControllerClient) CreateSystemEventbus(ctx context.Context, in *CreateEventbusRequest, opts ...grpc.CallOption) (*meta.Eventbus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSystemEventbus", varargs...)
	ret0, _ := ret[0].(*meta.Eventbus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSystemEventbus indicates an expected call of CreateSystemEventbus.
func (mr *MockEventbusControllerClientMockRecorder) CreateSystemEventbus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSystemEventbus", reflect.TypeOf((*MockEventbusControllerClient)(nil).CreateSystemEventbus), varargs...)
}

// DeleteEventbus mocks base method.
func (m *MockEventbusControllerClient) DeleteEventbus(ctx context.Context, in *DeleteEventbusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEventbus", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventbus indicates an expected call of DeleteEventbus.
func (mr *MockEventbusControllerClientMockRecorder) DeleteEventbus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventbus", reflect.TypeOf((*MockEventbusControllerClient)(nil).DeleteEventbus), varargs...)
}

// GetEventbus mocks base method.
func (m *MockEventbusControllerClient) GetEventbus(ctx context.Context, in *GetEventbusRequest, opts ...grpc.CallOption) (*meta.Eventbus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventbus", varargs...)
	ret0, _ := ret[0].(*meta.Eventbus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventbus indicates an expected call of GetEventbus.
func (mr *MockEventbusControllerClientMockRecorder) GetEventbus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventbus", reflect.TypeOf((*MockEventbusControllerClient)(nil).GetEventbus), varargs...)
}

// ListEventbus mocks base method.
func (m *MockEventbusControllerClient) ListEventbus(ctx context.Context, in *ListEventbusRequest, opts ...grpc.CallOption) (*ListEventbusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventbus", varargs...)
	ret0, _ := ret[0].(*ListEventbusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventbus indicates an expected call of ListEventbus.
func (mr *MockEventbusControllerClientMockRecorder) ListEventbus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventbus", reflect.TypeOf((*MockEventbusControllerClient)(nil).ListEventbus), varargs...)
}

// UpdateEventbus mocks base method.
func (m *MockEventbusControllerClient) UpdateEventbus(ctx context.Context, in *UpdateEventbusRequest, opts ...grpc.CallOption) (*meta.Eventbus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEventbus", varargs...)
	ret0, _ := ret[0].(*meta.Eventbus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventbus indicates an expected call of UpdateEventbus.
func (mr *MockEventbusControllerClientMockRecorder) UpdateEventbus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventbus", reflect.TypeOf((*MockEventbusControllerClient)(nil).UpdateEventbus), varargs...)
}

// MockEventbusControllerServer is a mock of EventbusControllerServer interface.
type MockEventbusControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockEventbusControllerServerMockRecorder
}

// MockEventbusControllerServerMockRecorder is the mock recorder for MockEventbusControllerServer.
type MockEventbusControllerServerMockRecorder struct {
	mock *MockEventbusControllerServer
}

// NewMockEventbusControllerServer creates a new mock instance.
func NewMockEventbusControllerServer(ctrl *gomock.Controller) *MockEventbusControllerServer {
	mock := &MockEventbusControllerServer{ctrl: ctrl}
	mock.recorder = &MockEventbusControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventbusControllerServer) EXPECT() *MockEventbusControllerServerMockRecorder {
	return m.recorder
}

// CreateEventbus mocks base method.
func (m *MockEventbusControllerServer) CreateEventbus(arg0 context.Context, arg1 *CreateEventbusRequest) (*meta.Eventbus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventbus", arg0, arg1)
	ret0, _ := ret[0].(*meta.Eventbus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventbus indicates an expected call of CreateEventbus.
func (mr *MockEventbusControllerServerMockRecorder) CreateEventbus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventbus", reflect.TypeOf((*MockEventbusControllerServer)(nil).CreateEventbus), arg0, arg1)
}

// CreateSystemEventbus mocks base method.
func (m *MockEventbusControllerServer) CreateSystemEventbus(arg0 context.Context, arg1 *CreateEventbusRequest) (*meta.Eventbus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSystemEventbus", arg0, arg1)
	ret0, _ := ret[0].(*meta.Eventbus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSystemEventbus indicates an expected call of CreateSystemEventbus.
func (mr *MockEventbusControllerServerMockRecorder) CreateSystemEventbus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSystemEventbus", reflect.TypeOf((*MockEventbusControllerServer)(nil).CreateSystemEventbus), arg0, arg1)
}

// DeleteEventbus mocks base method.
func (m *MockEventbusControllerServer) DeleteEventbus(arg0 context.Context, arg1 *DeleteEventbusRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventbus", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventbus indicates an expected call of DeleteEventbus.
func (mr *MockEventbusControllerServerMockRecorder) DeleteEventbus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventbus", reflect.TypeOf((*MockEventbusControllerServer)(nil).DeleteEventbus), arg0, arg1)
}

// GetEventbus mocks base method.
func (m *MockEventbusControllerServer) GetEventbus(arg0 context.Context, arg1 *GetEventbusRequest) (*meta.Eventbus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventbus", arg0, arg1)
	ret0, _ := ret[0].(*meta.Eventbus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventbus indicates an expected call of GetEventbus.
func (mr *MockEventbusControllerServerMockRecorder) GetEventbus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventbus", reflect.TypeOf((*MockEventbusControllerServer)(nil).GetEventbus), arg0, arg1)
}

// ListEventbus mocks base method.
func (m *MockEventbusControllerServer) ListEventbus(arg0 context.Context, arg1 *ListEventbusRequest) (*ListEventbusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventbus", arg0, arg1)
	ret0, _ := ret[0].(*ListEventbusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventbus indicates an expected call of ListEventbus.
func (mr *MockEventbusControllerServerMockRecorder) ListEventbus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventbus", reflect.TypeOf((*MockEventbusControllerServer)(nil).ListEventbus), arg0, arg1)
}

// UpdateEventbus mocks base method.
func (m *MockEventbusControllerServer) UpdateEventbus(arg0 context.Context, arg1 *UpdateEventbusRequest) (*meta.Eventbus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventbus", arg0, arg1)
	ret0, _ := ret[0].(*meta.Eventbus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventbus indicates an expected call of UpdateEventbus.
func (mr *MockEventbusControllerServerMockRecorder) UpdateEventbus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventbus", reflect.TypeOf((*MockEventbusControllerServer)(nil).UpdateEventbus), arg0, arg1)
}

// MockUnsafeEventbusControllerServer is a mock of UnsafeEventbusControllerServer interface.
type MockUnsafeEventbusControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEventbusControllerServerMockRecorder
}

// MockUnsafeEventbusControllerServerMockRecorder is the mock recorder for MockUnsafeEventbusControllerServer.
type MockUnsafeEventbusControllerServerMockRecorder struct {
	mock *MockUnsafeEventbusControllerServer
}

// NewMockUnsafeEventbusControllerServer creates a new mock instance.
func NewMockUnsafeEventbusControllerServer(ctrl *gomock.Controller) *MockUnsafeEventbusControllerServer {
	mock := &MockUnsafeEventbusControllerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEventbusControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEventbusControllerServer) EXPECT() *MockUnsafeEventbusControllerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEventbusControllerServer mocks base method.
func (m *MockUnsafeEventbusControllerServer) mustEmbedUnimplementedEventbusControllerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEventbusControllerServer")
}

// mustEmbedUnimplementedEventbusControllerServer indicates an expected call of mustEmbedUnimplementedEventbusControllerServer.
func (mr *MockUnsafeEventbusControllerServerMockRecorder) mustEmbedUnimplementedEventbusControllerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEventbusControllerServer", reflect.TypeOf((*MockUnsafeEventbusControllerServer)(nil).mustEmbedUnimplementedEventbusControllerServer))
}

// MockEventlogControllerClient is a mock of EventlogControllerClient interface.
type MockEventlogControllerClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventlogControllerClientMockRecorder
}

// MockEventlogControllerClientMockRecorder is the mock recorder for MockEventlogControllerClient.
type MockEventlogControllerClientMockRecorder struct {
	mock *MockEventlogControllerClient
}

// NewMockEventlogControllerClient creates a new mock instance.
func NewMockEventlogControllerClient(ctrl *gomock.Controller) *MockEventlogControllerClient {
	mock := &MockEventlogControllerClient{ctrl: ctrl}
	mock.recorder = &MockEventlogControllerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventlogControllerClient) EXPECT() *MockEventlogControllerClientMockRecorder {
	return m.recorder
}

// GetAppendableSegment mocks base method.
func (m *MockEventlogControllerClient) GetAppendableSegment(ctx context.Context, in *GetAppendableSegmentRequest, opts ...grpc.CallOption) (*GetAppendableSegmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppendableSegment", varargs...)
	ret0, _ := ret[0].(*GetAppendableSegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppendableSegment indicates an expected call of GetAppendableSegment.
func (mr *MockEventlogControllerClientMockRecorder) GetAppendableSegment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppendableSegment", reflect.TypeOf((*MockEventlogControllerClient)(nil).GetAppendableSegment), varargs...)
}

// ListSegment mocks base method.
func (m *MockEventlogControllerClient) ListSegment(ctx context.Context, in *ListSegmentRequest, opts ...grpc.CallOption) (*ListSegmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSegment", varargs...)
	ret0, _ := ret[0].(*ListSegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSegment indicates an expected call of ListSegment.
func (mr *MockEventlogControllerClientMockRecorder) ListSegment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSegment", reflect.TypeOf((*MockEventlogControllerClient)(nil).ListSegment), varargs...)
}

// MockEventlogControllerServer is a mock of EventlogControllerServer interface.
type MockEventlogControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockEventlogControllerServerMockRecorder
}

// MockEventlogControllerServerMockRecorder is the mock recorder for MockEventlogControllerServer.
type MockEventlogControllerServerMockRecorder struct {
	mock *MockEventlogControllerServer
}

// NewMockEventlogControllerServer creates a new mock instance.
func NewMockEventlogControllerServer(ctrl *gomock.Controller) *MockEventlogControllerServer {
	mock := &MockEventlogControllerServer{ctrl: ctrl}
	mock.recorder = &MockEventlogControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventlogControllerServer) EXPECT() *MockEventlogControllerServerMockRecorder {
	return m.recorder
}

// GetAppendableSegment mocks base method.
func (m *MockEventlogControllerServer) GetAppendableSegment(arg0 context.Context, arg1 *GetAppendableSegmentRequest) (*GetAppendableSegmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppendableSegment", arg0, arg1)
	ret0, _ := ret[0].(*GetAppendableSegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppendableSegment indicates an expected call of GetAppendableSegment.
func (mr *MockEventlogControllerServerMockRecorder) GetAppendableSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppendableSegment", reflect.TypeOf((*MockEventlogControllerServer)(nil).GetAppendableSegment), arg0, arg1)
}

// ListSegment mocks base method.
func (m *MockEventlogControllerServer) ListSegment(arg0 context.Context, arg1 *ListSegmentRequest) (*ListSegmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSegment", arg0, arg1)
	ret0, _ := ret[0].(*ListSegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSegment indicates an expected call of ListSegment.
func (mr *MockEventlogControllerServerMockRecorder) ListSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSegment", reflect.TypeOf((*MockEventlogControllerServer)(nil).ListSegment), arg0, arg1)
}

// MockUnsafeEventlogControllerServer is a mock of UnsafeEventlogControllerServer interface.
type MockUnsafeEventlogControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEventlogControllerServerMockRecorder
}

// MockUnsafeEventlogControllerServerMockRecorder is the mock recorder for MockUnsafeEventlogControllerServer.
type MockUnsafeEventlogControllerServerMockRecorder struct {
	mock *MockUnsafeEventlogControllerServer
}

// NewMockUnsafeEventlogControllerServer creates a new mock instance.
func NewMockUnsafeEventlogControllerServer(ctrl *gomock.Controller) *MockUnsafeEventlogControllerServer {
	mock := &MockUnsafeEventlogControllerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEventlogControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEventlogControllerServer) EXPECT() *MockUnsafeEventlogControllerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEventlogControllerServer mocks base method.
func (m *MockUnsafeEventlogControllerServer) mustEmbedUnimplementedEventlogControllerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEventlogControllerServer")
}

// mustEmbedUnimplementedEventlogControllerServer indicates an expected call of mustEmbedUnimplementedEventlogControllerServer.
func (mr *MockUnsafeEventlogControllerServerMockRecorder) mustEmbedUnimplementedEventlogControllerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEventlogControllerServer", reflect.TypeOf((*MockUnsafeEventlogControllerServer)(nil).mustEmbedUnimplementedEventlogControllerServer))
}

// MockSegmentControllerClient is a mock of SegmentControllerClient interface.
type MockSegmentControllerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentControllerClientMockRecorder
}

// MockSegmentControllerClientMockRecorder is the mock recorder for MockSegmentControllerClient.
type MockSegmentControllerClientMockRecorder struct {
	mock *MockSegmentControllerClient
}

// NewMockSegmentControllerClient creates a new mock instance.
func NewMockSegmentControllerClient(ctrl *gomock.Controller) *MockSegmentControllerClient {
	mock := &MockSegmentControllerClient{ctrl: ctrl}
	mock.recorder = &MockSegmentControllerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentControllerClient) EXPECT() *MockSegmentControllerClientMockRecorder {
	return m.recorder
}

// QuerySegmentRouteInfo mocks base method.
func (m *MockSegmentControllerClient) QuerySegmentRouteInfo(ctx context.Context, in *QuerySegmentRouteInfoRequest, opts ...grpc.CallOption) (*QuerySegmentRouteInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuerySegmentRouteInfo", varargs...)
	ret0, _ := ret[0].(*QuerySegmentRouteInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySegmentRouteInfo indicates an expected call of QuerySegmentRouteInfo.
func (mr *MockSegmentControllerClientMockRecorder) QuerySegmentRouteInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySegmentRouteInfo", reflect.TypeOf((*MockSegmentControllerClient)(nil).QuerySegmentRouteInfo), varargs...)
}

// RegisterSegmentServer mocks base method.
func (m *MockSegmentControllerClient) RegisterSegmentServer(ctx context.Context, in *RegisterSegmentServerRequest, opts ...grpc.CallOption) (*RegisterSegmentServerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterSegmentServer", varargs...)
	ret0, _ := ret[0].(*RegisterSegmentServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSegmentServer indicates an expected call of RegisterSegmentServer.
func (mr *MockSegmentControllerClientMockRecorder) RegisterSegmentServer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSegmentServer", reflect.TypeOf((*MockSegmentControllerClient)(nil).RegisterSegmentServer), varargs...)
}

// ReportSegmentBlockIsFull mocks base method.
func (m *MockSegmentControllerClient) ReportSegmentBlockIsFull(ctx context.Context, in *SegmentHeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportSegmentBlockIsFull", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSegmentBlockIsFull indicates an expected call of ReportSegmentBlockIsFull.
func (mr *MockSegmentControllerClientMockRecorder) ReportSegmentBlockIsFull(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSegmentBlockIsFull", reflect.TypeOf((*MockSegmentControllerClient)(nil).ReportSegmentBlockIsFull), varargs...)
}

// ReportSegmentLeader mocks base method.
func (m *MockSegmentControllerClient) ReportSegmentLeader(ctx context.Context, in *ReportSegmentLeaderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportSegmentLeader", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSegmentLeader indicates an expected call of ReportSegmentLeader.
func (mr *MockSegmentControllerClientMockRecorder) ReportSegmentLeader(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSegmentLeader", reflect.TypeOf((*MockSegmentControllerClient)(nil).ReportSegmentLeader), varargs...)
}

// SegmentHeartbeat mocks base method.
func (m *MockSegmentControllerClient) SegmentHeartbeat(ctx context.Context, opts ...grpc.CallOption) (SegmentController_SegmentHeartbeatClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SegmentHeartbeat", varargs...)
	ret0, _ := ret[0].(SegmentController_SegmentHeartbeatClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SegmentHeartbeat indicates an expected call of SegmentHeartbeat.
func (mr *MockSegmentControllerClientMockRecorder) SegmentHeartbeat(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SegmentHeartbeat", reflect.TypeOf((*MockSegmentControllerClient)(nil).SegmentHeartbeat), varargs...)
}

// UnregisterSegmentServer mocks base method.
func (m *MockSegmentControllerClient) UnregisterSegmentServer(ctx context.Context, in *UnregisterSegmentServerRequest, opts ...grpc.CallOption) (*UnregisterSegmentServerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnregisterSegmentServer", varargs...)
	ret0, _ := ret[0].(*UnregisterSegmentServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterSegmentServer indicates an expected call of UnregisterSegmentServer.
func (mr *MockSegmentControllerClientMockRecorder) UnregisterSegmentServer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterSegmentServer", reflect.TypeOf((*MockSegmentControllerClient)(nil).UnregisterSegmentServer), varargs...)
}

// MockSegmentController_SegmentHeartbeatClient is a mock of SegmentController_SegmentHeartbeatClient interface.
type MockSegmentController_SegmentHeartbeatClient struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentController_SegmentHeartbeatClientMockRecorder
}

// MockSegmentController_SegmentHeartbeatClientMockRecorder is the mock recorder for MockSegmentController_SegmentHeartbeatClient.
type MockSegmentController_SegmentHeartbeatClientMockRecorder struct {
	mock *MockSegmentController_SegmentHeartbeatClient
}

// NewMockSegmentController_SegmentHeartbeatClient creates a new mock instance.
func NewMockSegmentController_SegmentHeartbeatClient(ctrl *gomock.Controller) *MockSegmentController_SegmentHeartbeatClient {
	mock := &MockSegmentController_SegmentHeartbeatClient{ctrl: ctrl}
	mock.recorder = &MockSegmentController_SegmentHeartbeatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentController_SegmentHeartbeatClient) EXPECT() *MockSegmentController_SegmentHeartbeatClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockSegmentController_SegmentHeartbeatClient) CloseAndRecv() (*SegmentHeartbeatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*SegmentHeartbeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockSegmentController_SegmentHeartbeatClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockSegmentController_SegmentHeartbeatClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSegmentController_SegmentHeartbeatClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSegmentController_SegmentHeartbeatClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSegmentController_SegmentHeartbeatClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSegmentController_SegmentHeartbeatClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSegmentController_SegmentHeartbeatClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockSegmentController_SegmentHeartbeatClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSegmentController_SegmentHeartbeatClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSegmentController_SegmentHeartbeatClient) Send(arg0 *SegmentHeartbeatRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSegmentController_SegmentHeartbeatClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSegmentController_SegmentHeartbeatClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSegmentController_SegmentHeartbeatClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSegmentController_SegmentHeartbeatClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSegmentController_SegmentHeartbeatClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatClient)(nil).Trailer))
}

// MockSegmentControllerServer is a mock of SegmentControllerServer interface.
type MockSegmentControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentControllerServerMockRecorder
}

// MockSegmentControllerServerMockRecorder is the mock recorder for MockSegmentControllerServer.
type MockSegmentControllerServerMockRecorder struct {
	mock *MockSegmentControllerServer
}

// NewMockSegmentControllerServer creates a new mock instance.
func NewMockSegmentControllerServer(ctrl *gomock.Controller) *MockSegmentControllerServer {
	mock := &MockSegmentControllerServer{ctrl: ctrl}
	mock.recorder = &MockSegmentControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentControllerServer) EXPECT() *MockSegmentControllerServerMockRecorder {
	return m.recorder
}

// QuerySegmentRouteInfo mocks base method.
func (m *MockSegmentControllerServer) QuerySegmentRouteInfo(arg0 context.Context, arg1 *QuerySegmentRouteInfoRequest) (*QuerySegmentRouteInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySegmentRouteInfo", arg0, arg1)
	ret0, _ := ret[0].(*QuerySegmentRouteInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySegmentRouteInfo indicates an expected call of QuerySegmentRouteInfo.
func (mr *MockSegmentControllerServerMockRecorder) QuerySegmentRouteInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySegmentRouteInfo", reflect.TypeOf((*MockSegmentControllerServer)(nil).QuerySegmentRouteInfo), arg0, arg1)
}

// RegisterSegmentServer mocks base method.
func (m *MockSegmentControllerServer) RegisterSegmentServer(arg0 context.Context, arg1 *RegisterSegmentServerRequest) (*RegisterSegmentServerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSegmentServer", arg0, arg1)
	ret0, _ := ret[0].(*RegisterSegmentServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSegmentServer indicates an expected call of RegisterSegmentServer.
func (mr *MockSegmentControllerServerMockRecorder) RegisterSegmentServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSegmentServer", reflect.TypeOf((*MockSegmentControllerServer)(nil).RegisterSegmentServer), arg0, arg1)
}

// ReportSegmentBlockIsFull mocks base method.
func (m *MockSegmentControllerServer) ReportSegmentBlockIsFull(arg0 context.Context, arg1 *SegmentHeartbeatRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSegmentBlockIsFull", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSegmentBlockIsFull indicates an expected call of ReportSegmentBlockIsFull.
func (mr *MockSegmentControllerServerMockRecorder) ReportSegmentBlockIsFull(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSegmentBlockIsFull", reflect.TypeOf((*MockSegmentControllerServer)(nil).ReportSegmentBlockIsFull), arg0, arg1)
}

// ReportSegmentLeader mocks base method.
func (m *MockSegmentControllerServer) ReportSegmentLeader(arg0 context.Context, arg1 *ReportSegmentLeaderRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSegmentLeader", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportSegmentLeader indicates an expected call of ReportSegmentLeader.
func (mr *MockSegmentControllerServerMockRecorder) ReportSegmentLeader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSegmentLeader", reflect.TypeOf((*MockSegmentControllerServer)(nil).ReportSegmentLeader), arg0, arg1)
}

// SegmentHeartbeat mocks base method.
func (m *MockSegmentControllerServer) SegmentHeartbeat(arg0 SegmentController_SegmentHeartbeatServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SegmentHeartbeat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SegmentHeartbeat indicates an expected call of SegmentHeartbeat.
func (mr *MockSegmentControllerServerMockRecorder) SegmentHeartbeat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SegmentHeartbeat", reflect.TypeOf((*MockSegmentControllerServer)(nil).SegmentHeartbeat), arg0)
}

// UnregisterSegmentServer mocks base method.
func (m *MockSegmentControllerServer) UnregisterSegmentServer(arg0 context.Context, arg1 *UnregisterSegmentServerRequest) (*UnregisterSegmentServerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterSegmentServer", arg0, arg1)
	ret0, _ := ret[0].(*UnregisterSegmentServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterSegmentServer indicates an expected call of UnregisterSegmentServer.
func (mr *MockSegmentControllerServerMockRecorder) UnregisterSegmentServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterSegmentServer", reflect.TypeOf((*MockSegmentControllerServer)(nil).UnregisterSegmentServer), arg0, arg1)
}

// MockUnsafeSegmentControllerServer is a mock of UnsafeSegmentControllerServer interface.
type MockUnsafeSegmentControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSegmentControllerServerMockRecorder
}

// MockUnsafeSegmentControllerServerMockRecorder is the mock recorder for MockUnsafeSegmentControllerServer.
type MockUnsafeSegmentControllerServerMockRecorder struct {
	mock *MockUnsafeSegmentControllerServer
}

// NewMockUnsafeSegmentControllerServer creates a new mock instance.
func NewMockUnsafeSegmentControllerServer(ctrl *gomock.Controller) *MockUnsafeSegmentControllerServer {
	mock := &MockUnsafeSegmentControllerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSegmentControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSegmentControllerServer) EXPECT() *MockUnsafeSegmentControllerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSegmentControllerServer mocks base method.
func (m *MockUnsafeSegmentControllerServer) mustEmbedUnimplementedSegmentControllerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSegmentControllerServer")
}

// mustEmbedUnimplementedSegmentControllerServer indicates an expected call of mustEmbedUnimplementedSegmentControllerServer.
func (mr *MockUnsafeSegmentControllerServerMockRecorder) mustEmbedUnimplementedSegmentControllerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSegmentControllerServer", reflect.TypeOf((*MockUnsafeSegmentControllerServer)(nil).mustEmbedUnimplementedSegmentControllerServer))
}

// MockSegmentController_SegmentHeartbeatServer is a mock of SegmentController_SegmentHeartbeatServer interface.
type MockSegmentController_SegmentHeartbeatServer struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentController_SegmentHeartbeatServerMockRecorder
}

// MockSegmentController_SegmentHeartbeatServerMockRecorder is the mock recorder for MockSegmentController_SegmentHeartbeatServer.
type MockSegmentController_SegmentHeartbeatServerMockRecorder struct {
	mock *MockSegmentController_SegmentHeartbeatServer
}

// NewMockSegmentController_SegmentHeartbeatServer creates a new mock instance.
func NewMockSegmentController_SegmentHeartbeatServer(ctrl *gomock.Controller) *MockSegmentController_SegmentHeartbeatServer {
	mock := &MockSegmentController_SegmentHeartbeatServer{ctrl: ctrl}
	mock.recorder = &MockSegmentController_SegmentHeartbeatServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentController_SegmentHeartbeatServer) EXPECT() *MockSegmentController_SegmentHeartbeatServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSegmentController_SegmentHeartbeatServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSegmentController_SegmentHeartbeatServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockSegmentController_SegmentHeartbeatServer) Recv() (*SegmentHeartbeatRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*SegmentHeartbeatRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSegmentController_SegmentHeartbeatServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSegmentController_SegmentHeartbeatServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSegmentController_SegmentHeartbeatServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockSegmentController_SegmentHeartbeatServer) SendAndClose(arg0 *SegmentHeartbeatResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockSegmentController_SegmentHeartbeatServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockSegmentController_SegmentHeartbeatServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSegmentController_SegmentHeartbeatServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSegmentController_SegmentHeartbeatServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSegmentController_SegmentHeartbeatServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSegmentController_SegmentHeartbeatServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSegmentController_SegmentHeartbeatServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSegmentController_SegmentHeartbeatServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSegmentController_SegmentHeartbeatServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSegmentController_SegmentHeartbeatServer)(nil).SetTrailer), arg0)
}

// MockTriggerControllerClient is a mock of TriggerControllerClient interface.
type MockTriggerControllerClient struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerControllerClientMockRecorder
}

// MockTriggerControllerClientMockRecorder is the mock recorder for MockTriggerControllerClient.
type MockTriggerControllerClientMockRecorder struct {
	mock *MockTriggerControllerClient
}

// NewMockTriggerControllerClient creates a new mock instance.
func NewMockTriggerControllerClient(ctrl *gomock.Controller) *MockTriggerControllerClient {
	mock := &MockTriggerControllerClient{ctrl: ctrl}
	mock.recorder = &MockTriggerControllerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerControllerClient) EXPECT() *MockTriggerControllerClientMockRecorder {
	return m.recorder
}

// CommitOffset mocks base method.
func (m *MockTriggerControllerClient) CommitOffset(ctx context.Context, in *CommitOffsetRequest, opts ...grpc.CallOption) (*CommitOffsetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitOffset", varargs...)
	ret0, _ := ret[0].(*CommitOffsetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitOffset indicates an expected call of CommitOffset.
func (mr *MockTriggerControllerClientMockRecorder) CommitOffset(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitOffset", reflect.TypeOf((*MockTriggerControllerClient)(nil).CommitOffset), varargs...)
}

// CreateSubscription mocks base method.
func (m *MockTriggerControllerClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*meta.Subscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubscription", varargs...)
	ret0, _ := ret[0].(*meta.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockTriggerControllerClientMockRecorder) CreateSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockTriggerControllerClient)(nil).CreateSubscription), varargs...)
}

// DeleteSubscription mocks base method.
func (m *MockTriggerControllerClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubscription", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockTriggerControllerClientMockRecorder) DeleteSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockTriggerControllerClient)(nil).DeleteSubscription), varargs...)
}

// DisableSubscription mocks base method.
func (m *MockTriggerControllerClient) DisableSubscription(ctx context.Context, in *DisableSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableSubscription", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableSubscription indicates an expected call of DisableSubscription.
func (mr *MockTriggerControllerClientMockRecorder) DisableSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSubscription", reflect.TypeOf((*MockTriggerControllerClient)(nil).DisableSubscription), varargs...)
}

// GetDeadLetterEventOffset mocks base method.
func (m *MockTriggerControllerClient) GetDeadLetterEventOffset(ctx context.Context, in *GetDeadLetterEventOffsetRequest, opts ...grpc.CallOption) (*GetDeadLetterEventOffsetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeadLetterEventOffset", varargs...)
	ret0, _ := ret[0].(*GetDeadLetterEventOffsetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeadLetterEventOffset indicates an expected call of GetDeadLetterEventOffset.
func (mr *MockTriggerControllerClientMockRecorder) GetDeadLetterEventOffset(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeadLetterEventOffset", reflect.TypeOf((*MockTriggerControllerClient)(nil).GetDeadLetterEventOffset), varargs...)
}

// GetSubscription mocks base method.
func (m *MockTriggerControllerClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*meta.Subscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscription", varargs...)
	ret0, _ := ret[0].(*meta.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockTriggerControllerClientMockRecorder) GetSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockTriggerControllerClient)(nil).GetSubscription), varargs...)
}

// ListSubscription mocks base method.
func (m *MockTriggerControllerClient) ListSubscription(ctx context.Context, in *ListSubscriptionRequest, opts ...grpc.CallOption) (*ListSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscription", varargs...)
	ret0, _ := ret[0].(*ListSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscription indicates an expected call of ListSubscription.
func (mr *MockTriggerControllerClientMockRecorder) ListSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscription", reflect.TypeOf((*MockTriggerControllerClient)(nil).ListSubscription), varargs...)
}

// RegisterTriggerWorker mocks base method.
func (m *MockTriggerControllerClient) RegisterTriggerWorker(ctx context.Context, in *RegisterTriggerWorkerRequest, opts ...grpc.CallOption) (*RegisterTriggerWorkerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterTriggerWorker", varargs...)
	ret0, _ := ret[0].(*RegisterTriggerWorkerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTriggerWorker indicates an expected call of RegisterTriggerWorker.
func (mr *MockTriggerControllerClientMockRecorder) RegisterTriggerWorker(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTriggerWorker", reflect.TypeOf((*MockTriggerControllerClient)(nil).RegisterTriggerWorker), varargs...)
}

// ResetOffsetToTimestamp mocks base method.
func (m *MockTriggerControllerClient) ResetOffsetToTimestamp(ctx context.Context, in *ResetOffsetToTimestampRequest, opts ...grpc.CallOption) (*ResetOffsetToTimestampResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetOffsetToTimestamp", varargs...)
	ret0, _ := ret[0].(*ResetOffsetToTimestampResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetOffsetToTimestamp indicates an expected call of ResetOffsetToTimestamp.
func (mr *MockTriggerControllerClientMockRecorder) ResetOffsetToTimestamp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetOffsetToTimestamp", reflect.TypeOf((*MockTriggerControllerClient)(nil).ResetOffsetToTimestamp), varargs...)
}

// ResumeSubscription mocks base method.
func (m *MockTriggerControllerClient) ResumeSubscription(ctx context.Context, in *ResumeSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeSubscription", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeSubscription indicates an expected call of ResumeSubscription.
func (mr *MockTriggerControllerClientMockRecorder) ResumeSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeSubscription", reflect.TypeOf((*MockTriggerControllerClient)(nil).ResumeSubscription), varargs...)
}

// SetDeadLetterEventOffset mocks base method.
func (m *MockTriggerControllerClient) SetDeadLetterEventOffset(ctx context.Context, in *SetDeadLetterEventOffsetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDeadLetterEventOffset", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDeadLetterEventOffset indicates an expected call of SetDeadLetterEventOffset.
func (mr *MockTriggerControllerClientMockRecorder) SetDeadLetterEventOffset(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadLetterEventOffset", reflect.TypeOf((*MockTriggerControllerClient)(nil).SetDeadLetterEventOffset), varargs...)
}

// TriggerWorkerHeartbeat mocks base method.
func (m *MockTriggerControllerClient) TriggerWorkerHeartbeat(ctx context.Context, opts ...grpc.CallOption) (TriggerController_TriggerWorkerHeartbeatClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerWorkerHeartbeat", varargs...)
	ret0, _ := ret[0].(TriggerController_TriggerWorkerHeartbeatClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerWorkerHeartbeat indicates an expected call of TriggerWorkerHeartbeat.
func (mr *MockTriggerControllerClientMockRecorder) TriggerWorkerHeartbeat(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerWorkerHeartbeat", reflect.TypeOf((*MockTriggerControllerClient)(nil).TriggerWorkerHeartbeat), varargs...)
}

// UnregisterTriggerWorker mocks base method.
func (m *MockTriggerControllerClient) UnregisterTriggerWorker(ctx context.Context, in *UnregisterTriggerWorkerRequest, opts ...grpc.CallOption) (*UnregisterTriggerWorkerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnregisterTriggerWorker", varargs...)
	ret0, _ := ret[0].(*UnregisterTriggerWorkerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterTriggerWorker indicates an expected call of UnregisterTriggerWorker.
func (mr *MockTriggerControllerClientMockRecorder) UnregisterTriggerWorker(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterTriggerWorker", reflect.TypeOf((*MockTriggerControllerClient)(nil).UnregisterTriggerWorker), varargs...)
}

// UpdateSubscription mocks base method.
func (m *MockTriggerControllerClient) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*meta.Subscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubscription", varargs...)
	ret0, _ := ret[0].(*meta.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockTriggerControllerClientMockRecorder) UpdateSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockTriggerControllerClient)(nil).UpdateSubscription), varargs...)
}

// MockTriggerController_TriggerWorkerHeartbeatClient is a mock of TriggerController_TriggerWorkerHeartbeatClient interface.
type MockTriggerController_TriggerWorkerHeartbeatClient struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerController_TriggerWorkerHeartbeatClientMockRecorder
}

// MockTriggerController_TriggerWorkerHeartbeatClientMockRecorder is the mock recorder for MockTriggerController_TriggerWorkerHeartbeatClient.
type MockTriggerController_TriggerWorkerHeartbeatClientMockRecorder struct {
	mock *MockTriggerController_TriggerWorkerHeartbeatClient
}

// NewMockTriggerController_TriggerWorkerHeartbeatClient creates a new mock instance.
func NewMockTriggerController_TriggerWorkerHeartbeatClient(ctrl *gomock.Controller) *MockTriggerController_TriggerWorkerHeartbeatClient {
	mock := &MockTriggerController_TriggerWorkerHeartbeatClient{ctrl: ctrl}
	mock.recorder = &MockTriggerController_TriggerWorkerHeartbeatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerController_TriggerWorkerHeartbeatClient) EXPECT() *MockTriggerController_TriggerWorkerHeartbeatClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockTriggerController_TriggerWorkerHeartbeatClient) CloseAndRecv() (*TriggerWorkerHeartbeatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*TriggerWorkerHeartbeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockTriggerController_TriggerWorkerHeartbeatClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockTriggerController_TriggerWorkerHeartbeatClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockTriggerController_TriggerWorkerHeartbeatClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockTriggerController_TriggerWorkerHeartbeatClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTriggerController_TriggerWorkerHeartbeatClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatClient)(nil).Context))
}

// Header mocks base method.
func (m *MockTriggerController_TriggerWorkerHeartbeatClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockTriggerController_TriggerWorkerHeartbeatClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockTriggerController_TriggerWorkerHeartbeatClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTriggerController_TriggerWorkerHeartbeatClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockTriggerController_TriggerWorkerHeartbeatClient) Send(arg0 *TriggerWorkerHeartbeatRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTriggerController_TriggerWorkerHeartbeatClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockTriggerController_TriggerWorkerHeartbeatClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTriggerController_TriggerWorkerHeartbeatClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockTriggerController_TriggerWorkerHeartbeatClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockTriggerController_TriggerWorkerHeartbeatClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatClient)(nil).Trailer))
}

// MockTriggerControllerServer is a mock of TriggerControllerServer interface.
type MockTriggerControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerControllerServerMockRecorder
}

// MockTriggerControllerServerMockRecorder is the mock recorder for MockTriggerControllerServer.
type MockTriggerControllerServerMockRecorder struct {
	mock *MockTriggerControllerServer
}

// NewMockTriggerControllerServer creates a new mock instance.
func NewMockTriggerControllerServer(ctrl *gomock.Controller) *MockTriggerControllerServer {
	mock := &MockTriggerControllerServer{ctrl: ctrl}
	mock.recorder = &MockTriggerControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerControllerServer) EXPECT() *MockTriggerControllerServerMockRecorder {
	return m.recorder
}

// CommitOffset mocks base method.
func (m *MockTriggerControllerServer) CommitOffset(arg0 context.Context, arg1 *CommitOffsetRequest) (*CommitOffsetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitOffset", arg0, arg1)
	ret0, _ := ret[0].(*CommitOffsetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitOffset indicates an expected call of CommitOffset.
func (mr *MockTriggerControllerServerMockRecorder) CommitOffset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitOffset", reflect.TypeOf((*MockTriggerControllerServer)(nil).CommitOffset), arg0, arg1)
}

// CreateSubscription mocks base method.
func (m *MockTriggerControllerServer) CreateSubscription(arg0 context.Context, arg1 *CreateSubscriptionRequest) (*meta.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", arg0, arg1)
	ret0, _ := ret[0].(*meta.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockTriggerControllerServerMockRecorder) CreateSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockTriggerControllerServer)(nil).CreateSubscription), arg0, arg1)
}

// DeleteSubscription mocks base method.
func (m *MockTriggerControllerServer) DeleteSubscription(arg0 context.Context, arg1 *DeleteSubscriptionRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockTriggerControllerServerMockRecorder) DeleteSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockTriggerControllerServer)(nil).DeleteSubscription), arg0, arg1)
}

// DisableSubscription mocks base method.
func (m *MockTriggerControllerServer) DisableSubscription(arg0 context.Context, arg1 *DisableSubscriptionRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableSubscription", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableSubscription indicates an expected call of DisableSubscription.
func (mr *MockTriggerControllerServerMockRecorder) DisableSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSubscription", reflect.TypeOf((*MockTriggerControllerServer)(nil).DisableSubscription), arg0, arg1)
}

// GetDeadLetterEventOffset mocks base method.
func (m *MockTriggerControllerServer) GetDeadLetterEventOffset(arg0 context.Context, arg1 *GetDeadLetterEventOffsetRequest) (*GetDeadLetterEventOffsetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeadLetterEventOffset", arg0, arg1)
	ret0, _ := ret[0].(*GetDeadLetterEventOffsetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeadLetterEventOffset indicates an expected call of GetDeadLetterEventOffset.
func (mr *MockTriggerControllerServerMockRecorder) GetDeadLetterEventOffset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeadLetterEventOffset", reflect.TypeOf((*MockTriggerControllerServer)(nil).GetDeadLetterEventOffset), arg0, arg1)
}

// GetSubscription mocks base method.
func (m *MockTriggerControllerServer) GetSubscription(arg0 context.Context, arg1 *GetSubscriptionRequest) (*meta.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", arg0, arg1)
	ret0, _ := ret[0].(*meta.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockTriggerControllerServerMockRecorder) GetSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockTriggerControllerServer)(nil).GetSubscription), arg0, arg1)
}

// ListSubscription mocks base method.
func (m *MockTriggerControllerServer) ListSubscription(arg0 context.Context, arg1 *ListSubscriptionRequest) (*ListSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscription", arg0, arg1)
	ret0, _ := ret[0].(*ListSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscription indicates an expected call of ListSubscription.
func (mr *MockTriggerControllerServerMockRecorder) ListSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscription", reflect.TypeOf((*MockTriggerControllerServer)(nil).ListSubscription), arg0, arg1)
}

// RegisterTriggerWorker mocks base method.
func (m *MockTriggerControllerServer) RegisterTriggerWorker(arg0 context.Context, arg1 *RegisterTriggerWorkerRequest) (*RegisterTriggerWorkerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTriggerWorker", arg0, arg1)
	ret0, _ := ret[0].(*RegisterTriggerWorkerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTriggerWorker indicates an expected call of RegisterTriggerWorker.
func (mr *MockTriggerControllerServerMockRecorder) RegisterTriggerWorker(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTriggerWorker", reflect.TypeOf((*MockTriggerControllerServer)(nil).RegisterTriggerWorker), arg0, arg1)
}

// ResetOffsetToTimestamp mocks base method.
func (m *MockTriggerControllerServer) ResetOffsetToTimestamp(arg0 context.Context, arg1 *ResetOffsetToTimestampRequest) (*ResetOffsetToTimestampResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetOffsetToTimestamp", arg0, arg1)
	ret0, _ := ret[0].(*ResetOffsetToTimestampResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetOffsetToTimestamp indicates an expected call of ResetOffsetToTimestamp.
func (mr *MockTriggerControllerServerMockRecorder) ResetOffsetToTimestamp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetOffsetToTimestamp", reflect.TypeOf((*MockTriggerControllerServer)(nil).ResetOffsetToTimestamp), arg0, arg1)
}

// ResumeSubscription mocks base method.
func (m *MockTriggerControllerServer) ResumeSubscription(arg0 context.Context, arg1 *ResumeSubscriptionRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeSubscription", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeSubscription indicates an expected call of ResumeSubscription.
func (mr *MockTriggerControllerServerMockRecorder) ResumeSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeSubscription", reflect.TypeOf((*MockTriggerControllerServer)(nil).ResumeSubscription), arg0, arg1)
}

// SetDeadLetterEventOffset mocks base method.
func (m *MockTriggerControllerServer) SetDeadLetterEventOffset(arg0 context.Context, arg1 *SetDeadLetterEventOffsetRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadLetterEventOffset", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDeadLetterEventOffset indicates an expected call of SetDeadLetterEventOffset.
func (mr *MockTriggerControllerServerMockRecorder) SetDeadLetterEventOffset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadLetterEventOffset", reflect.TypeOf((*MockTriggerControllerServer)(nil).SetDeadLetterEventOffset), arg0, arg1)
}

// TriggerWorkerHeartbeat mocks base method.
func (m *MockTriggerControllerServer) TriggerWorkerHeartbeat(arg0 TriggerController_TriggerWorkerHeartbeatServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerWorkerHeartbeat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerWorkerHeartbeat indicates an expected call of TriggerWorkerHeartbeat.
func (mr *MockTriggerControllerServerMockRecorder) TriggerWorkerHeartbeat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerWorkerHeartbeat", reflect.TypeOf((*MockTriggerControllerServer)(nil).TriggerWorkerHeartbeat), arg0)
}

// UnregisterTriggerWorker mocks base method.
func (m *MockTriggerControllerServer) UnregisterTriggerWorker(arg0 context.Context, arg1 *UnregisterTriggerWorkerRequest) (*UnregisterTriggerWorkerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterTriggerWorker", arg0, arg1)
	ret0, _ := ret[0].(*UnregisterTriggerWorkerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterTriggerWorker indicates an expected call of UnregisterTriggerWorker.
func (mr *MockTriggerControllerServerMockRecorder) UnregisterTriggerWorker(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterTriggerWorker", reflect.TypeOf((*MockTriggerControllerServer)(nil).UnregisterTriggerWorker), arg0, arg1)
}

// UpdateSubscription mocks base method.
func (m *MockTriggerControllerServer) UpdateSubscription(arg0 context.Context, arg1 *UpdateSubscriptionRequest) (*meta.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", arg0, arg1)
	ret0, _ := ret[0].(*meta.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockTriggerControllerServerMockRecorder) UpdateSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockTriggerControllerServer)(nil).UpdateSubscription), arg0, arg1)
}

// MockUnsafeTriggerControllerServer is a mock of UnsafeTriggerControllerServer interface.
type MockUnsafeTriggerControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTriggerControllerServerMockRecorder
}

// MockUnsafeTriggerControllerServerMockRecorder is the mock recorder for MockUnsafeTriggerControllerServer.
type MockUnsafeTriggerControllerServerMockRecorder struct {
	mock *MockUnsafeTriggerControllerServer
}

// NewMockUnsafeTriggerControllerServer creates a new mock instance.
func NewMockUnsafeTriggerControllerServer(ctrl *gomock.Controller) *MockUnsafeTriggerControllerServer {
	mock := &MockUnsafeTriggerControllerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTriggerControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTriggerControllerServer) EXPECT() *MockUnsafeTriggerControllerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTriggerControllerServer mocks base method.
func (m *MockUnsafeTriggerControllerServer) mustEmbedUnimplementedTriggerControllerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTriggerControllerServer")
}

// mustEmbedUnimplementedTriggerControllerServer indicates an expected call of mustEmbedUnimplementedTriggerControllerServer.
func (mr *MockUnsafeTriggerControllerServerMockRecorder) mustEmbedUnimplementedTriggerControllerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTriggerControllerServer", reflect.TypeOf((*MockUnsafeTriggerControllerServer)(nil).mustEmbedUnimplementedTriggerControllerServer))
}

// MockTriggerController_TriggerWorkerHeartbeatServer is a mock of TriggerController_TriggerWorkerHeartbeatServer interface.
type MockTriggerController_TriggerWorkerHeartbeatServer struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerController_TriggerWorkerHeartbeatServerMockRecorder
}

// MockTriggerController_TriggerWorkerHeartbeatServerMockRecorder is the mock recorder for MockTriggerController_TriggerWorkerHeartbeatServer.
type MockTriggerController_TriggerWorkerHeartbeatServerMockRecorder struct {
	mock *MockTriggerController_TriggerWorkerHeartbeatServer
}

// NewMockTriggerController_TriggerWorkerHeartbeatServer creates a new mock instance.
func NewMockTriggerController_TriggerWorkerHeartbeatServer(ctrl *gomock.Controller) *MockTriggerController_TriggerWorkerHeartbeatServer {
	mock := &MockTriggerController_TriggerWorkerHeartbeatServer{ctrl: ctrl}
	mock.recorder = &MockTriggerController_TriggerWorkerHeartbeatServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerController_TriggerWorkerHeartbeatServer) EXPECT() *MockTriggerController_TriggerWorkerHeartbeatServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockTriggerController_TriggerWorkerHeartbeatServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTriggerController_TriggerWorkerHeartbeatServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockTriggerController_TriggerWorkerHeartbeatServer) Recv() (*TriggerWorkerHeartbeatRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*TriggerWorkerHeartbeatRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTriggerController_TriggerWorkerHeartbeatServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockTriggerController_TriggerWorkerHeartbeatServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTriggerController_TriggerWorkerHeartbeatServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockTriggerController_TriggerWorkerHeartbeatServer) SendAndClose(arg0 *TriggerWorkerHeartbeatResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockTriggerController_TriggerWorkerHeartbeatServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockTriggerController_TriggerWorkerHeartbeatServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockTriggerController_TriggerWorkerHeartbeatServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockTriggerController_TriggerWorkerHeartbeatServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTriggerController_TriggerWorkerHeartbeatServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockTriggerController_TriggerWorkerHeartbeatServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockTriggerController_TriggerWorkerHeartbeatServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockTriggerController_TriggerWorkerHeartbeatServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockTriggerController_TriggerWorkerHeartbeatServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockTriggerController_TriggerWorkerHeartbeatServer)(nil).SetTrailer), arg0)
}

// MockSnowflakeControllerClient is a mock of SnowflakeControllerClient interface.
type MockSnowflakeControllerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSnowflakeControllerClientMockRecorder
}

// MockSnowflakeControllerClientMockRecorder is the mock recorder for MockSnowflakeControllerClient.
type MockSnowflakeControllerClientMockRecorder struct {
	mock *MockSnowflakeControllerClient
}

// NewMockSnowflakeControllerClient creates a new mock instance.
func NewMockSnowflakeControllerClient(ctrl *gomock.Controller) *MockSnowflakeControllerClient {
	mock := &MockSnowflakeControllerClient{ctrl: ctrl}
	mock.recorder = &MockSnowflakeControllerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnowflakeControllerClient) EXPECT() *MockSnowflakeControllerClientMockRecorder {
	return m.recorder
}

// GetClusterStartTime mocks base method.
func (m *MockSnowflakeControllerClient) GetClusterStartTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*timestamppb.Timestamp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterStartTime", varargs...)
	ret0, _ := ret[0].(*timestamppb.Timestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterStartTime indicates an expected call of GetClusterStartTime.
func (mr *MockSnowflakeControllerClientMockRecorder) GetClusterStartTime(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterStartTime", reflect.TypeOf((*MockSnowflakeControllerClient)(nil).GetClusterStartTime), varargs...)
}

// RegisterNode mocks base method.
func (m *MockSnowflakeControllerClient) RegisterNode(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterNode", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNode indicates an expected call of RegisterNode.
func (mr *MockSnowflakeControllerClientMockRecorder) RegisterNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNode", reflect.TypeOf((*MockSnowflakeControllerClient)(nil).RegisterNode), varargs...)
}

// UnregisterNode mocks base method.
func (m *MockSnowflakeControllerClient) UnregisterNode(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnregisterNode", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterNode indicates an expected call of UnregisterNode.
func (mr *MockSnowflakeControllerClientMockRecorder) UnregisterNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterNode", reflect.TypeOf((*MockSnowflakeControllerClient)(nil).UnregisterNode), varargs...)
}

// MockSnowflakeControllerServer is a mock of SnowflakeControllerServer interface.
type MockSnowflakeControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockSnowflakeControllerServerMockRecorder
}

// MockSnowflakeControllerServerMockRecorder is the mock recorder for MockSnowflakeControllerServer.
type MockSnowflakeControllerServerMockRecorder struct {
	mock *MockSnowflakeControllerServer
}

// NewMockSnowflakeControllerServer creates a new mock instance.
func NewMockSnowflakeControllerServer(ctrl *gomock.Controller) *MockSnowflakeControllerServer {
	mock := &MockSnowflakeControllerServer{ctrl: ctrl}
	mock.recorder = &MockSnowflakeControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnowflakeControllerServer) EXPECT() *MockSnowflakeControllerServerMockRecorder {
	return m.recorder
}

// GetClusterStartTime mocks base method.
func (m *MockSnowflakeControllerServer) GetClusterStartTime(arg0 context.Context, arg1 *emptypb.Empty) (*timestamppb.Timestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterStartTime", arg0, arg1)
	ret0, _ := ret[0].(*timestamppb.Timestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterStartTime indicates an expected call of GetClusterStartTime.
func (mr *MockSnowflakeControllerServerMockRecorder) GetClusterStartTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterStartTime", reflect.TypeOf((*MockSnowflakeControllerServer)(nil).GetClusterStartTime), arg0, arg1)
}

// RegisterNode mocks base method.
func (m *MockSnowflakeControllerServer) RegisterNode(arg0 context.Context, arg1 *wrapperspb.UInt32Value) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNode", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNode indicates an expected call of RegisterNode.
func (mr *MockSnowflakeControllerServerMockRecorder) RegisterNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNode", reflect.TypeOf((*MockSnowflakeControllerServer)(nil).RegisterNode), arg0, arg1)
}

// UnregisterNode mocks base method.
func (m *MockSnowflakeControllerServer) UnregisterNode(arg0 context.Context, arg1 *wrapperspb.UInt32Value) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterNode", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterNode indicates an expected call of UnregisterNode.
func (mr *MockSnowflakeControllerServerMockRecorder) UnregisterNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterNode", reflect.TypeOf((*MockSnowflakeControllerServer)(nil).UnregisterNode), arg0, arg1)
}

// MockUnsafeSnowflakeControllerServer is a mock of UnsafeSnowflakeControllerServer interface.
type MockUnsafeSnowflakeControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSnowflakeControllerServerMockRecorder
}

// MockUnsafeSnowflakeControllerServerMockRecorder is the mock recorder for MockUnsafeSnowflakeControllerServer.
type MockUnsafeSnowflakeControllerServerMockRecorder struct {
	mock *MockUnsafeSnowflakeControllerServer
}

// NewMockUnsafeSnowflakeControllerServer creates a new mock instance.
func NewMockUnsafeSnowflakeControllerServer(ctrl *gomock.Controller) *MockUnsafeSnowflakeControllerServer {
	mock := &MockUnsafeSnowflakeControllerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSnowflakeControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSnowflakeControllerServer) EXPECT() *MockUnsafeSnowflakeControllerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSnowflakeControllerServer mocks base method.
func (m *MockUnsafeSnowflakeControllerServer) mustEmbedUnimplementedSnowflakeControllerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSnowflakeControllerServer")
}

// mustEmbedUnimplementedSnowflakeControllerServer indicates an expected call of mustEmbedUnimplementedSnowflakeControllerServer.
func (mr *MockUnsafeSnowflakeControllerServerMockRecorder) mustEmbedUnimplementedSnowflakeControllerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSnowflakeControllerServer", reflect.TypeOf((*MockUnsafeSnowflakeControllerServer)(nil).mustEmbedUnimplementedSnowflakeControllerServer))
}
