// Copyright 2022 Linkall Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: proxy.proto

package proxy

import (
	context "context"
	controller "github.com/vanus-labs/vanus/proto/pkg/controller"
	meta "github.com/vanus-labs/vanus/proto/pkg/meta"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ControllerProxy_CreateEventbus_FullMethodName           = "/vanus.core.proxy.ControllerProxy/CreateEventbus"
	ControllerProxy_DeleteEventbus_FullMethodName           = "/vanus.core.proxy.ControllerProxy/DeleteEventbus"
	ControllerProxy_GetEventbus_FullMethodName              = "/vanus.core.proxy.ControllerProxy/GetEventbus"
	ControllerProxy_ListEventbus_FullMethodName             = "/vanus.core.proxy.ControllerProxy/ListEventbus"
	ControllerProxy_UpdateEventbus_FullMethodName           = "/vanus.core.proxy.ControllerProxy/UpdateEventbus"
	ControllerProxy_ListSegment_FullMethodName              = "/vanus.core.proxy.ControllerProxy/ListSegment"
	ControllerProxy_CreateSubscription_FullMethodName       = "/vanus.core.proxy.ControllerProxy/CreateSubscription"
	ControllerProxy_UpdateSubscription_FullMethodName       = "/vanus.core.proxy.ControllerProxy/UpdateSubscription"
	ControllerProxy_DeleteSubscription_FullMethodName       = "/vanus.core.proxy.ControllerProxy/DeleteSubscription"
	ControllerProxy_GetSubscription_FullMethodName          = "/vanus.core.proxy.ControllerProxy/GetSubscription"
	ControllerProxy_ListSubscription_FullMethodName         = "/vanus.core.proxy.ControllerProxy/ListSubscription"
	ControllerProxy_DisableSubscription_FullMethodName      = "/vanus.core.proxy.ControllerProxy/DisableSubscription"
	ControllerProxy_ResumeSubscription_FullMethodName       = "/vanus.core.proxy.ControllerProxy/ResumeSubscription"
	ControllerProxy_ResetOffsetToTimestamp_FullMethodName   = "/vanus.core.proxy.ControllerProxy/ResetOffsetToTimestamp"
	ControllerProxy_ClusterInfo_FullMethodName              = "/vanus.core.proxy.ControllerProxy/ClusterInfo"
	ControllerProxy_LookupOffset_FullMethodName             = "/vanus.core.proxy.ControllerProxy/LookupOffset"
	ControllerProxy_GetEvent_FullMethodName                 = "/vanus.core.proxy.ControllerProxy/GetEvent"
	ControllerProxy_ValidateSubscription_FullMethodName     = "/vanus.core.proxy.ControllerProxy/ValidateSubscription"
	ControllerProxy_GetDeadLetterEvent_FullMethodName       = "/vanus.core.proxy.ControllerProxy/GetDeadLetterEvent"
	ControllerProxy_ResendDeadLetterEvent_FullMethodName    = "/vanus.core.proxy.ControllerProxy/ResendDeadLetterEvent"
	ControllerProxy_SetDeadLetterEventOffset_FullMethodName = "/vanus.core.proxy.ControllerProxy/SetDeadLetterEventOffset"
)

// ControllerProxyClient is the client API for ControllerProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerProxyClient interface {
	// Eventbus
	CreateEventbus(ctx context.Context, in *controller.CreateEventbusRequest, opts ...grpc.CallOption) (*meta.Eventbus, error)
	DeleteEventbus(ctx context.Context, in *controller.DeleteEventbusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetEventbus(ctx context.Context, in *controller.GetEventbusRequest, opts ...grpc.CallOption) (*meta.Eventbus, error)
	ListEventbus(ctx context.Context, in *controller.ListEventbusRequest, opts ...grpc.CallOption) (*controller.ListEventbusResponse, error)
	UpdateEventbus(ctx context.Context, in *controller.UpdateEventbusRequest, opts ...grpc.CallOption) (*meta.Eventbus, error)
	ListSegment(ctx context.Context, in *controller.ListSegmentRequest, opts ...grpc.CallOption) (*controller.ListSegmentResponse, error)
	// Trigger
	CreateSubscription(ctx context.Context, in *controller.CreateSubscriptionRequest, opts ...grpc.CallOption) (*meta.Subscription, error)
	UpdateSubscription(ctx context.Context, in *controller.UpdateSubscriptionRequest, opts ...grpc.CallOption) (*meta.Subscription, error)
	DeleteSubscription(ctx context.Context, in *controller.DeleteSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSubscription(ctx context.Context, in *controller.GetSubscriptionRequest, opts ...grpc.CallOption) (*meta.Subscription, error)
	ListSubscription(ctx context.Context, in *controller.ListSubscriptionRequest, opts ...grpc.CallOption) (*controller.ListSubscriptionResponse, error)
	DisableSubscription(ctx context.Context, in *controller.DisableSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResumeSubscription(ctx context.Context, in *controller.ResumeSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetOffsetToTimestamp(ctx context.Context, in *controller.ResetOffsetToTimestampRequest, opts ...grpc.CallOption) (*controller.ResetOffsetToTimestampResponse, error)
	// custom
	ClusterInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterInfoResponse, error)
	LookupOffset(ctx context.Context, in *LookupOffsetRequest, opts ...grpc.CallOption) (*LookupOffsetResponse, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	ValidateSubscription(ctx context.Context, in *ValidateSubscriptionRequest, opts ...grpc.CallOption) (*ValidateSubscriptionResponse, error)
	// dead letter
	GetDeadLetterEvent(ctx context.Context, in *GetDeadLetterEventRequest, opts ...grpc.CallOption) (*GetDeadLetterEventResponse, error)
	ResendDeadLetterEvent(ctx context.Context, in *ResendDeadLetterEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetDeadLetterEventOffset(ctx context.Context, in *controller.SetDeadLetterEventOffsetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type controllerProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerProxyClient(cc grpc.ClientConnInterface) ControllerProxyClient {
	return &controllerProxyClient{cc}
}

func (c *controllerProxyClient) CreateEventbus(ctx context.Context, in *controller.CreateEventbusRequest, opts ...grpc.CallOption) (*meta.Eventbus, error) {
	out := new(meta.Eventbus)
	err := c.cc.Invoke(ctx, ControllerProxy_CreateEventbus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) DeleteEventbus(ctx context.Context, in *controller.DeleteEventbusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerProxy_DeleteEventbus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) GetEventbus(ctx context.Context, in *controller.GetEventbusRequest, opts ...grpc.CallOption) (*meta.Eventbus, error) {
	out := new(meta.Eventbus)
	err := c.cc.Invoke(ctx, ControllerProxy_GetEventbus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) ListEventbus(ctx context.Context, in *controller.ListEventbusRequest, opts ...grpc.CallOption) (*controller.ListEventbusResponse, error) {
	out := new(controller.ListEventbusResponse)
	err := c.cc.Invoke(ctx, ControllerProxy_ListEventbus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) UpdateEventbus(ctx context.Context, in *controller.UpdateEventbusRequest, opts ...grpc.CallOption) (*meta.Eventbus, error) {
	out := new(meta.Eventbus)
	err := c.cc.Invoke(ctx, ControllerProxy_UpdateEventbus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) ListSegment(ctx context.Context, in *controller.ListSegmentRequest, opts ...grpc.CallOption) (*controller.ListSegmentResponse, error) {
	out := new(controller.ListSegmentResponse)
	err := c.cc.Invoke(ctx, ControllerProxy_ListSegment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) CreateSubscription(ctx context.Context, in *controller.CreateSubscriptionRequest, opts ...grpc.CallOption) (*meta.Subscription, error) {
	out := new(meta.Subscription)
	err := c.cc.Invoke(ctx, ControllerProxy_CreateSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) UpdateSubscription(ctx context.Context, in *controller.UpdateSubscriptionRequest, opts ...grpc.CallOption) (*meta.Subscription, error) {
	out := new(meta.Subscription)
	err := c.cc.Invoke(ctx, ControllerProxy_UpdateSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) DeleteSubscription(ctx context.Context, in *controller.DeleteSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerProxy_DeleteSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) GetSubscription(ctx context.Context, in *controller.GetSubscriptionRequest, opts ...grpc.CallOption) (*meta.Subscription, error) {
	out := new(meta.Subscription)
	err := c.cc.Invoke(ctx, ControllerProxy_GetSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) ListSubscription(ctx context.Context, in *controller.ListSubscriptionRequest, opts ...grpc.CallOption) (*controller.ListSubscriptionResponse, error) {
	out := new(controller.ListSubscriptionResponse)
	err := c.cc.Invoke(ctx, ControllerProxy_ListSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) DisableSubscription(ctx context.Context, in *controller.DisableSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerProxy_DisableSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) ResumeSubscription(ctx context.Context, in *controller.ResumeSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerProxy_ResumeSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) ResetOffsetToTimestamp(ctx context.Context, in *controller.ResetOffsetToTimestampRequest, opts ...grpc.CallOption) (*controller.ResetOffsetToTimestampResponse, error) {
	out := new(controller.ResetOffsetToTimestampResponse)
	err := c.cc.Invoke(ctx, ControllerProxy_ResetOffsetToTimestamp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) ClusterInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterInfoResponse, error) {
	out := new(ClusterInfoResponse)
	err := c.cc.Invoke(ctx, ControllerProxy_ClusterInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) LookupOffset(ctx context.Context, in *LookupOffsetRequest, opts ...grpc.CallOption) (*LookupOffsetResponse, error) {
	out := new(LookupOffsetResponse)
	err := c.cc.Invoke(ctx, ControllerProxy_LookupOffset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, ControllerProxy_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) ValidateSubscription(ctx context.Context, in *ValidateSubscriptionRequest, opts ...grpc.CallOption) (*ValidateSubscriptionResponse, error) {
	out := new(ValidateSubscriptionResponse)
	err := c.cc.Invoke(ctx, ControllerProxy_ValidateSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) GetDeadLetterEvent(ctx context.Context, in *GetDeadLetterEventRequest, opts ...grpc.CallOption) (*GetDeadLetterEventResponse, error) {
	out := new(GetDeadLetterEventResponse)
	err := c.cc.Invoke(ctx, ControllerProxy_GetDeadLetterEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) ResendDeadLetterEvent(ctx context.Context, in *ResendDeadLetterEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerProxy_ResendDeadLetterEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerProxyClient) SetDeadLetterEventOffset(ctx context.Context, in *controller.SetDeadLetterEventOffsetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControllerProxy_SetDeadLetterEventOffset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerProxyServer is the server API for ControllerProxy service.
// All implementations should embed UnimplementedControllerProxyServer
// for forward compatibility
type ControllerProxyServer interface {
	// Eventbus
	CreateEventbus(context.Context, *controller.CreateEventbusRequest) (*meta.Eventbus, error)
	DeleteEventbus(context.Context, *controller.DeleteEventbusRequest) (*emptypb.Empty, error)
	GetEventbus(context.Context, *controller.GetEventbusRequest) (*meta.Eventbus, error)
	ListEventbus(context.Context, *controller.ListEventbusRequest) (*controller.ListEventbusResponse, error)
	UpdateEventbus(context.Context, *controller.UpdateEventbusRequest) (*meta.Eventbus, error)
	ListSegment(context.Context, *controller.ListSegmentRequest) (*controller.ListSegmentResponse, error)
	// Trigger
	CreateSubscription(context.Context, *controller.CreateSubscriptionRequest) (*meta.Subscription, error)
	UpdateSubscription(context.Context, *controller.UpdateSubscriptionRequest) (*meta.Subscription, error)
	DeleteSubscription(context.Context, *controller.DeleteSubscriptionRequest) (*emptypb.Empty, error)
	GetSubscription(context.Context, *controller.GetSubscriptionRequest) (*meta.Subscription, error)
	ListSubscription(context.Context, *controller.ListSubscriptionRequest) (*controller.ListSubscriptionResponse, error)
	DisableSubscription(context.Context, *controller.DisableSubscriptionRequest) (*emptypb.Empty, error)
	ResumeSubscription(context.Context, *controller.ResumeSubscriptionRequest) (*emptypb.Empty, error)
	ResetOffsetToTimestamp(context.Context, *controller.ResetOffsetToTimestampRequest) (*controller.ResetOffsetToTimestampResponse, error)
	// custom
	ClusterInfo(context.Context, *emptypb.Empty) (*ClusterInfoResponse, error)
	LookupOffset(context.Context, *LookupOffsetRequest) (*LookupOffsetResponse, error)
	GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	ValidateSubscription(context.Context, *ValidateSubscriptionRequest) (*ValidateSubscriptionResponse, error)
	// dead letter
	GetDeadLetterEvent(context.Context, *GetDeadLetterEventRequest) (*GetDeadLetterEventResponse, error)
	ResendDeadLetterEvent(context.Context, *ResendDeadLetterEventRequest) (*emptypb.Empty, error)
	SetDeadLetterEventOffset(context.Context, *controller.SetDeadLetterEventOffsetRequest) (*emptypb.Empty, error)
}

// UnimplementedControllerProxyServer should be embedded to have forward compatible implementations.
type UnimplementedControllerProxyServer struct {
}

func (UnimplementedControllerProxyServer) CreateEventbus(context.Context, *controller.CreateEventbusRequest) (*meta.Eventbus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventbus not implemented")
}
func (UnimplementedControllerProxyServer) DeleteEventbus(context.Context, *controller.DeleteEventbusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventbus not implemented")
}
func (UnimplementedControllerProxyServer) GetEventbus(context.Context, *controller.GetEventbusRequest) (*meta.Eventbus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventbus not implemented")
}
func (UnimplementedControllerProxyServer) ListEventbus(context.Context, *controller.ListEventbusRequest) (*controller.ListEventbusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventbus not implemented")
}
func (UnimplementedControllerProxyServer) UpdateEventbus(context.Context, *controller.UpdateEventbusRequest) (*meta.Eventbus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventbus not implemented")
}
func (UnimplementedControllerProxyServer) ListSegment(context.Context, *controller.ListSegmentRequest) (*controller.ListSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSegment not implemented")
}
func (UnimplementedControllerProxyServer) CreateSubscription(context.Context, *controller.CreateSubscriptionRequest) (*meta.Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedControllerProxyServer) UpdateSubscription(context.Context, *controller.UpdateSubscriptionRequest) (*meta.Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}
func (UnimplementedControllerProxyServer) DeleteSubscription(context.Context, *controller.DeleteSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (UnimplementedControllerProxyServer) GetSubscription(context.Context, *controller.GetSubscriptionRequest) (*meta.Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedControllerProxyServer) ListSubscription(context.Context, *controller.ListSubscriptionRequest) (*controller.ListSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscription not implemented")
}
func (UnimplementedControllerProxyServer) DisableSubscription(context.Context, *controller.DisableSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableSubscription not implemented")
}
func (UnimplementedControllerProxyServer) ResumeSubscription(context.Context, *controller.ResumeSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeSubscription not implemented")
}
func (UnimplementedControllerProxyServer) ResetOffsetToTimestamp(context.Context, *controller.ResetOffsetToTimestampRequest) (*controller.ResetOffsetToTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetOffsetToTimestamp not implemented")
}
func (UnimplementedControllerProxyServer) ClusterInfo(context.Context, *emptypb.Empty) (*ClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterInfo not implemented")
}
func (UnimplementedControllerProxyServer) LookupOffset(context.Context, *LookupOffsetRequest) (*LookupOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupOffset not implemented")
}
func (UnimplementedControllerProxyServer) GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedControllerProxyServer) ValidateSubscription(context.Context, *ValidateSubscriptionRequest) (*ValidateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSubscription not implemented")
}
func (UnimplementedControllerProxyServer) GetDeadLetterEvent(context.Context, *GetDeadLetterEventRequest) (*GetDeadLetterEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeadLetterEvent not implemented")
}
func (UnimplementedControllerProxyServer) ResendDeadLetterEvent(context.Context, *ResendDeadLetterEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendDeadLetterEvent not implemented")
}
func (UnimplementedControllerProxyServer) SetDeadLetterEventOffset(context.Context, *controller.SetDeadLetterEventOffsetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeadLetterEventOffset not implemented")
}

// UnsafeControllerProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerProxyServer will
// result in compilation errors.
type UnsafeControllerProxyServer interface {
	mustEmbedUnimplementedControllerProxyServer()
}

func RegisterControllerProxyServer(s grpc.ServiceRegistrar, srv ControllerProxyServer) {
	s.RegisterService(&ControllerProxy_ServiceDesc, srv)
}

func _ControllerProxy_CreateEventbus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.CreateEventbusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).CreateEventbus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_CreateEventbus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).CreateEventbus(ctx, req.(*controller.CreateEventbusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_DeleteEventbus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.DeleteEventbusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).DeleteEventbus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_DeleteEventbus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).DeleteEventbus(ctx, req.(*controller.DeleteEventbusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_GetEventbus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.GetEventbusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).GetEventbus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_GetEventbus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).GetEventbus(ctx, req.(*controller.GetEventbusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_ListEventbus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.ListEventbusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).ListEventbus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_ListEventbus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).ListEventbus(ctx, req.(*controller.ListEventbusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_UpdateEventbus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.UpdateEventbusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).UpdateEventbus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_UpdateEventbus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).UpdateEventbus(ctx, req.(*controller.UpdateEventbusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_ListSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.ListSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).ListSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_ListSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).ListSegment(ctx, req.(*controller.ListSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_CreateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).CreateSubscription(ctx, req.(*controller.CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.UpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_UpdateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).UpdateSubscription(ctx, req.(*controller.UpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_DeleteSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).DeleteSubscription(ctx, req.(*controller.DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_GetSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).GetSubscription(ctx, req.(*controller.GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_ListSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.ListSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).ListSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_ListSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).ListSubscription(ctx, req.(*controller.ListSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_DisableSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.DisableSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).DisableSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_DisableSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).DisableSubscription(ctx, req.(*controller.DisableSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_ResumeSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.ResumeSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).ResumeSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_ResumeSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).ResumeSubscription(ctx, req.(*controller.ResumeSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_ResetOffsetToTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.ResetOffsetToTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).ResetOffsetToTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_ResetOffsetToTimestamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).ResetOffsetToTimestamp(ctx, req.(*controller.ResetOffsetToTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_ClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).ClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_ClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).ClusterInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_LookupOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).LookupOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_LookupOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).LookupOffset(ctx, req.(*LookupOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_ValidateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).ValidateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_ValidateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).ValidateSubscription(ctx, req.(*ValidateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_GetDeadLetterEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeadLetterEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).GetDeadLetterEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_GetDeadLetterEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).GetDeadLetterEvent(ctx, req.(*GetDeadLetterEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_ResendDeadLetterEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendDeadLetterEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).ResendDeadLetterEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_ResendDeadLetterEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).ResendDeadLetterEvent(ctx, req.(*ResendDeadLetterEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerProxy_SetDeadLetterEventOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.SetDeadLetterEventOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerProxyServer).SetDeadLetterEventOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerProxy_SetDeadLetterEventOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerProxyServer).SetDeadLetterEventOffset(ctx, req.(*controller.SetDeadLetterEventOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControllerProxy_ServiceDesc is the grpc.ServiceDesc for ControllerProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControllerProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vanus.core.proxy.ControllerProxy",
	HandlerType: (*ControllerProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEventbus",
			Handler:    _ControllerProxy_CreateEventbus_Handler,
		},
		{
			MethodName: "DeleteEventbus",
			Handler:    _ControllerProxy_DeleteEventbus_Handler,
		},
		{
			MethodName: "GetEventbus",
			Handler:    _ControllerProxy_GetEventbus_Handler,
		},
		{
			MethodName: "ListEventbus",
			Handler:    _ControllerProxy_ListEventbus_Handler,
		},
		{
			MethodName: "UpdateEventbus",
			Handler:    _ControllerProxy_UpdateEventbus_Handler,
		},
		{
			MethodName: "ListSegment",
			Handler:    _ControllerProxy_ListSegment_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _ControllerProxy_CreateSubscription_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _ControllerProxy_UpdateSubscription_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _ControllerProxy_DeleteSubscription_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _ControllerProxy_GetSubscription_Handler,
		},
		{
			MethodName: "ListSubscription",
			Handler:    _ControllerProxy_ListSubscription_Handler,
		},
		{
			MethodName: "DisableSubscription",
			Handler:    _ControllerProxy_DisableSubscription_Handler,
		},
		{
			MethodName: "ResumeSubscription",
			Handler:    _ControllerProxy_ResumeSubscription_Handler,
		},
		{
			MethodName: "ResetOffsetToTimestamp",
			Handler:    _ControllerProxy_ResetOffsetToTimestamp_Handler,
		},
		{
			MethodName: "ClusterInfo",
			Handler:    _ControllerProxy_ClusterInfo_Handler,
		},
		{
			MethodName: "LookupOffset",
			Handler:    _ControllerProxy_LookupOffset_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _ControllerProxy_GetEvent_Handler,
		},
		{
			MethodName: "ValidateSubscription",
			Handler:    _ControllerProxy_ValidateSubscription_Handler,
		},
		{
			MethodName: "GetDeadLetterEvent",
			Handler:    _ControllerProxy_GetDeadLetterEvent_Handler,
		},
		{
			MethodName: "ResendDeadLetterEvent",
			Handler:    _ControllerProxy_ResendDeadLetterEvent_Handler,
		},
		{
			MethodName: "SetDeadLetterEventOffset",
			Handler:    _ControllerProxy_SetDeadLetterEventOffset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy.proto",
}

const (
	StoreProxy_Publish_FullMethodName   = "/vanus.core.proxy.StoreProxy/Publish"
	StoreProxy_Subscribe_FullMethodName = "/vanus.core.proxy.StoreProxy/Subscribe"
	StoreProxy_Ack_FullMethodName       = "/vanus.core.proxy.StoreProxy/Ack"
)

// StoreProxyClient is the client API for StoreProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreProxyClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (StoreProxy_SubscribeClient, error)
	Ack(ctx context.Context, opts ...grpc.CallOption) (StoreProxy_AckClient, error)
}

type storeProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreProxyClient(cc grpc.ClientConnInterface) StoreProxyClient {
	return &storeProxyClient{cc}
}

func (c *storeProxyClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StoreProxy_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeProxyClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (StoreProxy_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StoreProxy_ServiceDesc.Streams[0], StoreProxy_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storeProxySubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StoreProxy_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type storeProxySubscribeClient struct {
	grpc.ClientStream
}

func (x *storeProxySubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeProxyClient) Ack(ctx context.Context, opts ...grpc.CallOption) (StoreProxy_AckClient, error) {
	stream, err := c.cc.NewStream(ctx, &StoreProxy_ServiceDesc.Streams[1], StoreProxy_Ack_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storeProxyAckClient{stream}
	return x, nil
}

type StoreProxy_AckClient interface {
	Send(*AckRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type storeProxyAckClient struct {
	grpc.ClientStream
}

func (x *storeProxyAckClient) Send(m *AckRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storeProxyAckClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StoreProxyServer is the server API for StoreProxy service.
// All implementations should embed UnimplementedStoreProxyServer
// for forward compatibility
type StoreProxyServer interface {
	Publish(context.Context, *PublishRequest) (*emptypb.Empty, error)
	Subscribe(*SubscribeRequest, StoreProxy_SubscribeServer) error
	Ack(StoreProxy_AckServer) error
}

// UnimplementedStoreProxyServer should be embedded to have forward compatible implementations.
type UnimplementedStoreProxyServer struct {
}

func (UnimplementedStoreProxyServer) Publish(context.Context, *PublishRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedStoreProxyServer) Subscribe(*SubscribeRequest, StoreProxy_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStoreProxyServer) Ack(StoreProxy_AckServer) error {
	return status.Errorf(codes.Unimplemented, "method Ack not implemented")
}

// UnsafeStoreProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreProxyServer will
// result in compilation errors.
type UnsafeStoreProxyServer interface {
	mustEmbedUnimplementedStoreProxyServer()
}

func RegisterStoreProxyServer(s grpc.ServiceRegistrar, srv StoreProxyServer) {
	s.RegisterService(&StoreProxy_ServiceDesc, srv)
}

func _StoreProxy_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreProxyServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreProxy_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreProxyServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreProxy_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreProxyServer).Subscribe(m, &storeProxySubscribeServer{stream})
}

type StoreProxy_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type storeProxySubscribeServer struct {
	grpc.ServerStream
}

func (x *storeProxySubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StoreProxy_Ack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreProxyServer).Ack(&storeProxyAckServer{stream})
}

type StoreProxy_AckServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*AckRequest, error)
	grpc.ServerStream
}

type storeProxyAckServer struct {
	grpc.ServerStream
}

func (x *storeProxyAckServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storeProxyAckServer) Recv() (*AckRequest, error) {
	m := new(AckRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StoreProxy_ServiceDesc is the grpc.ServiceDesc for StoreProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vanus.core.proxy.StoreProxy",
	HandlerType: (*StoreProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _StoreProxy_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StoreProxy_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Ack",
			Handler:       _StoreProxy_Ack_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proxy.proto",
}
