// Copyright 2022 Linkall Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: segment.proto

package segment

import (
	v1 "cloudevents.io/genproto/v1"
	context "context"
	config "github.com/linkall-labs/vanus/proto/pkg/config"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StartSegmentServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config   *config.ServerConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	ServerId uint64               `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
}

func (x *StartSegmentServerRequest) Reset() {
	*x = StartSegmentServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSegmentServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSegmentServerRequest) ProtoMessage() {}

func (x *StartSegmentServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSegmentServerRequest.ProtoReflect.Descriptor instead.
func (*StartSegmentServerRequest) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{0}
}

func (x *StartSegmentServerRequest) GetConfig() *config.ServerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *StartSegmentServerRequest) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type StartSegmentServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartSegmentServerResponse) Reset() {
	*x = StartSegmentServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSegmentServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSegmentServerResponse) ProtoMessage() {}

func (x *StartSegmentServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSegmentServerResponse.ProtoReflect.Descriptor instead.
func (*StartSegmentServerResponse) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{1}
}

type StopSegmentServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopSegmentServerRequest) Reset() {
	*x = StopSegmentServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSegmentServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSegmentServerRequest) ProtoMessage() {}

func (x *StopSegmentServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSegmentServerRequest.ProtoReflect.Descriptor instead.
func (*StopSegmentServerRequest) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{2}
}

type StopSegmentServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopSegmentServerResponse) Reset() {
	*x = StopSegmentServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSegmentServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSegmentServerResponse) ProtoMessage() {}

func (x *StopSegmentServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSegmentServerResponse.ProtoReflect.Descriptor instead.
func (*StopSegmentServerResponse) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{3}
}

type CreateBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Size int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *CreateBlockRequest) Reset() {
	*x = CreateBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlockRequest) ProtoMessage() {}

func (x *CreateBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlockRequest.ProtoReflect.Descriptor instead.
func (*CreateBlockRequest) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{4}
}

func (x *CreateBlockRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateBlockRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type RemoveBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveBlockRequest) Reset() {
	*x = RemoveBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBlockRequest) ProtoMessage() {}

func (x *RemoveBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBlockRequest.ProtoReflect.Descriptor instead.
func (*RemoveBlockRequest) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveBlockRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetBlockInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBlockInfoRequest) Reset() {
	*x = GetBlockInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInfoRequest) ProtoMessage() {}

func (x *GetBlockInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBlockInfoRequest) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{6}
}

type GetBlockInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBlockInfoResponse) Reset() {
	*x = GetBlockInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInfoResponse) ProtoMessage() {}

func (x *GetBlockInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBlockInfoResponse) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{7}
}

type ActivateSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventLogId     uint64 `protobuf:"varint,1,opt,name=event_log_id,json=eventLogId,proto3" json:"event_log_id,omitempty"`
	ReplicaGroupId uint64 `protobuf:"varint,2,opt,name=replica_group_id,json=replicaGroupId,proto3" json:"replica_group_id,omitempty"`
	// block ID and its server endpoint.
	Replicas map[uint64]string `protobuf:"bytes,3,rep,name=replicas,proto3" json:"replicas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ActivateSegmentRequest) Reset() {
	*x = ActivateSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateSegmentRequest) ProtoMessage() {}

func (x *ActivateSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateSegmentRequest.ProtoReflect.Descriptor instead.
func (*ActivateSegmentRequest) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{8}
}

func (x *ActivateSegmentRequest) GetEventLogId() uint64 {
	if x != nil {
		return x.EventLogId
	}
	return 0
}

func (x *ActivateSegmentRequest) GetReplicaGroupId() uint64 {
	if x != nil {
		return x.ReplicaGroupId
	}
	return 0
}

func (x *ActivateSegmentRequest) GetReplicas() map[uint64]string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type ActivateSegmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateSegmentResponse) Reset() {
	*x = ActivateSegmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateSegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateSegmentResponse) ProtoMessage() {}

func (x *ActivateSegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateSegmentResponse.ProtoReflect.Descriptor instead.
func (*ActivateSegmentResponse) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{9}
}

type InactivateSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InactivateSegmentRequest) Reset() {
	*x = InactivateSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InactivateSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InactivateSegmentRequest) ProtoMessage() {}

func (x *InactivateSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InactivateSegmentRequest.ProtoReflect.Descriptor instead.
func (*InactivateSegmentRequest) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{10}
}

type InactivateSegmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InactivateSegmentResponse) Reset() {
	*x = InactivateSegmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InactivateSegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InactivateSegmentResponse) ProtoMessage() {}

func (x *InactivateSegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InactivateSegmentResponse.ProtoReflect.Descriptor instead.
func (*InactivateSegmentResponse) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{11}
}

type AppendToBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId uint64              `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Events  *v1.CloudEventBatch `protobuf:"bytes,2,opt,name=events,proto3" json:"events,omitempty"`
}

func (x *AppendToBlockRequest) Reset() {
	*x = AppendToBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendToBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendToBlockRequest) ProtoMessage() {}

func (x *AppendToBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendToBlockRequest.ProtoReflect.Descriptor instead.
func (*AppendToBlockRequest) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{12}
}

func (x *AppendToBlockRequest) GetBlockId() uint64 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *AppendToBlockRequest) GetEvents() *v1.CloudEventBatch {
	if x != nil {
		return x.Events
	}
	return nil
}

type AppendToBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offsets []int64 `protobuf:"varint,1,rep,packed,name=offsets,proto3" json:"offsets,omitempty"`
}

func (x *AppendToBlockResponse) Reset() {
	*x = AppendToBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendToBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendToBlockResponse) ProtoMessage() {}

func (x *AppendToBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendToBlockResponse.ProtoReflect.Descriptor instead.
func (*AppendToBlockResponse) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{13}
}

func (x *AppendToBlockResponse) GetOffsets() []int64 {
	if x != nil {
		return x.Offsets
	}
	return nil
}

type ReadFromBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId uint64 `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Offset  int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Number  int64  `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *ReadFromBlockRequest) Reset() {
	*x = ReadFromBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadFromBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFromBlockRequest) ProtoMessage() {}

func (x *ReadFromBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFromBlockRequest.ProtoReflect.Descriptor instead.
func (*ReadFromBlockRequest) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{14}
}

func (x *ReadFromBlockRequest) GetBlockId() uint64 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *ReadFromBlockRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReadFromBlockRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type ReadFromBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events *v1.CloudEventBatch `protobuf:"bytes,1,opt,name=events,proto3" json:"events,omitempty"`
	// Don't use this now, just used to optimize cpu overhead of SegmentServer in
	// the future for backward compatibility
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ReadFromBlockResponse) Reset() {
	*x = ReadFromBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadFromBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFromBlockResponse) ProtoMessage() {}

func (x *ReadFromBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFromBlockResponse.ProtoReflect.Descriptor instead.
func (*ReadFromBlockResponse) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{15}
}

func (x *ReadFromBlockResponse) GetEvents() *v1.CloudEventBatch {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ReadFromBlockResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_segment_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_segment_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_segment_proto_rawDescGZIP(), []int{16}
}

func (x *StatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_segment_proto protoreflect.FileDescriptor

var file_segment_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x74, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1b, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x15, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfa, 0x01, 0x0a,
	0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c, 0x2e,
	0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x1a, 0x3b, 0x0a, 0x0d,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1b, 0x0a, 0x19, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a,
	0x14, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x31, 0x0a, 0x15,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x22,
	0x61, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x6d, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x28, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xe6, 0x07, 0x0a, 0x0d,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6c, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x30, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c,
	0x2e, 0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61,
	0x6c, 0x6c, 0x2e, 0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x04, 0x53,
	0x74, 0x6f, 0x70, 0x12, 0x2f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x61,
	0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c, 0x2e, 0x76,
	0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x29, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c, 0x2e,
	0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x29, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c,
	0x6c, 0x2e, 0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c,
	0x2e, 0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c,
	0x2e, 0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c, 0x2e,
	0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c, 0x2e, 0x76,
	0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x61, 0x6e, 0x75,
	0x73, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6a, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x61, 0x6e, 0x75, 0x73,
	0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x6c, 0x6c, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f,
	0x76, 0x61, 0x6e, 0x75, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_segment_proto_rawDescOnce sync.Once
	file_segment_proto_rawDescData = file_segment_proto_rawDesc
)

func file_segment_proto_rawDescGZIP() []byte {
	file_segment_proto_rawDescOnce.Do(func() {
		file_segment_proto_rawDescData = protoimpl.X.CompressGZIP(file_segment_proto_rawDescData)
	})
	return file_segment_proto_rawDescData
}

var file_segment_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_segment_proto_goTypes = []interface{}{
	(*StartSegmentServerRequest)(nil),  // 0: linkall.vanus.segment.StartSegmentServerRequest
	(*StartSegmentServerResponse)(nil), // 1: linkall.vanus.segment.StartSegmentServerResponse
	(*StopSegmentServerRequest)(nil),   // 2: linkall.vanus.segment.StopSegmentServerRequest
	(*StopSegmentServerResponse)(nil),  // 3: linkall.vanus.segment.StopSegmentServerResponse
	(*CreateBlockRequest)(nil),         // 4: linkall.vanus.segment.CreateBlockRequest
	(*RemoveBlockRequest)(nil),         // 5: linkall.vanus.segment.RemoveBlockRequest
	(*GetBlockInfoRequest)(nil),        // 6: linkall.vanus.segment.GetBlockInfoRequest
	(*GetBlockInfoResponse)(nil),       // 7: linkall.vanus.segment.GetBlockInfoResponse
	(*ActivateSegmentRequest)(nil),     // 8: linkall.vanus.segment.ActivateSegmentRequest
	(*ActivateSegmentResponse)(nil),    // 9: linkall.vanus.segment.ActivateSegmentResponse
	(*InactivateSegmentRequest)(nil),   // 10: linkall.vanus.segment.InactivateSegmentRequest
	(*InactivateSegmentResponse)(nil),  // 11: linkall.vanus.segment.InactivateSegmentResponse
	(*AppendToBlockRequest)(nil),       // 12: linkall.vanus.segment.AppendToBlockRequest
	(*AppendToBlockResponse)(nil),      // 13: linkall.vanus.segment.AppendToBlockResponse
	(*ReadFromBlockRequest)(nil),       // 14: linkall.vanus.segment.ReadFromBlockRequest
	(*ReadFromBlockResponse)(nil),      // 15: linkall.vanus.segment.ReadFromBlockResponse
	(*StatusResponse)(nil),             // 16: linkall.vanus.segment.StatusResponse
	nil,                                // 17: linkall.vanus.segment.ActivateSegmentRequest.ReplicasEntry
	(*config.ServerConfig)(nil),        // 18: linkall.vanus.config.ServerConfig
	(*v1.CloudEventBatch)(nil),         // 19: io.cloudevents.v1.CloudEventBatch
	(*emptypb.Empty)(nil),              // 20: google.protobuf.Empty
}
var file_segment_proto_depIdxs = []int32{
	18, // 0: linkall.vanus.segment.StartSegmentServerRequest.config:type_name -> linkall.vanus.config.ServerConfig
	17, // 1: linkall.vanus.segment.ActivateSegmentRequest.replicas:type_name -> linkall.vanus.segment.ActivateSegmentRequest.ReplicasEntry
	19, // 2: linkall.vanus.segment.AppendToBlockRequest.events:type_name -> io.cloudevents.v1.CloudEventBatch
	19, // 3: linkall.vanus.segment.ReadFromBlockResponse.events:type_name -> io.cloudevents.v1.CloudEventBatch
	0,  // 4: linkall.vanus.segment.SegmentServer.Start:input_type -> linkall.vanus.segment.StartSegmentServerRequest
	2,  // 5: linkall.vanus.segment.SegmentServer.Stop:input_type -> linkall.vanus.segment.StopSegmentServerRequest
	4,  // 6: linkall.vanus.segment.SegmentServer.CreateBlock:input_type -> linkall.vanus.segment.CreateBlockRequest
	5,  // 7: linkall.vanus.segment.SegmentServer.RemoveBlock:input_type -> linkall.vanus.segment.RemoveBlockRequest
	6,  // 8: linkall.vanus.segment.SegmentServer.GetBlockInfo:input_type -> linkall.vanus.segment.GetBlockInfoRequest
	8,  // 9: linkall.vanus.segment.SegmentServer.ActivateSegment:input_type -> linkall.vanus.segment.ActivateSegmentRequest
	10, // 10: linkall.vanus.segment.SegmentServer.InactivateSegment:input_type -> linkall.vanus.segment.InactivateSegmentRequest
	12, // 11: linkall.vanus.segment.SegmentServer.AppendToBlock:input_type -> linkall.vanus.segment.AppendToBlockRequest
	14, // 12: linkall.vanus.segment.SegmentServer.ReadFromBlock:input_type -> linkall.vanus.segment.ReadFromBlockRequest
	20, // 13: linkall.vanus.segment.SegmentServer.Status:input_type -> google.protobuf.Empty
	1,  // 14: linkall.vanus.segment.SegmentServer.Start:output_type -> linkall.vanus.segment.StartSegmentServerResponse
	3,  // 15: linkall.vanus.segment.SegmentServer.Stop:output_type -> linkall.vanus.segment.StopSegmentServerResponse
	20, // 16: linkall.vanus.segment.SegmentServer.CreateBlock:output_type -> google.protobuf.Empty
	20, // 17: linkall.vanus.segment.SegmentServer.RemoveBlock:output_type -> google.protobuf.Empty
	7,  // 18: linkall.vanus.segment.SegmentServer.GetBlockInfo:output_type -> linkall.vanus.segment.GetBlockInfoResponse
	9,  // 19: linkall.vanus.segment.SegmentServer.ActivateSegment:output_type -> linkall.vanus.segment.ActivateSegmentResponse
	20, // 20: linkall.vanus.segment.SegmentServer.InactivateSegment:output_type -> google.protobuf.Empty
	13, // 21: linkall.vanus.segment.SegmentServer.AppendToBlock:output_type -> linkall.vanus.segment.AppendToBlockResponse
	15, // 22: linkall.vanus.segment.SegmentServer.ReadFromBlock:output_type -> linkall.vanus.segment.ReadFromBlockResponse
	16, // 23: linkall.vanus.segment.SegmentServer.Status:output_type -> linkall.vanus.segment.StatusResponse
	14, // [14:24] is the sub-list for method output_type
	4,  // [4:14] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_segment_proto_init() }
func file_segment_proto_init() {
	if File_segment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_segment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSegmentServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSegmentServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopSegmentServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopSegmentServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateSegmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InactivateSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InactivateSegmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendToBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendToBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadFromBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadFromBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_segment_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_segment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_segment_proto_goTypes,
		DependencyIndexes: file_segment_proto_depIdxs,
		MessageInfos:      file_segment_proto_msgTypes,
	}.Build()
	File_segment_proto = out.File
	file_segment_proto_rawDesc = nil
	file_segment_proto_goTypes = nil
	file_segment_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SegmentServerClient is the client API for SegmentServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SegmentServerClient interface {
	Start(ctx context.Context, in *StartSegmentServerRequest, opts ...grpc.CallOption) (*StartSegmentServerResponse, error)
	Stop(ctx context.Context, in *StopSegmentServerRequest, opts ...grpc.CallOption) (*StopSegmentServerResponse, error)
	CreateBlock(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveBlock(ctx context.Context, in *RemoveBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBlockInfo(ctx context.Context, in *GetBlockInfoRequest, opts ...grpc.CallOption) (*GetBlockInfoResponse, error)
	ActivateSegment(ctx context.Context, in *ActivateSegmentRequest, opts ...grpc.CallOption) (*ActivateSegmentResponse, error)
	InactivateSegment(ctx context.Context, in *InactivateSegmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AppendToBlock(ctx context.Context, in *AppendToBlockRequest, opts ...grpc.CallOption) (*AppendToBlockResponse, error)
	ReadFromBlock(ctx context.Context, in *ReadFromBlockRequest, opts ...grpc.CallOption) (*ReadFromBlockResponse, error)
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
}

type segmentServerClient struct {
	cc grpc.ClientConnInterface
}

func NewSegmentServerClient(cc grpc.ClientConnInterface) SegmentServerClient {
	return &segmentServerClient{cc}
}

func (c *segmentServerClient) Start(ctx context.Context, in *StartSegmentServerRequest, opts ...grpc.CallOption) (*StartSegmentServerResponse, error) {
	out := new(StartSegmentServerResponse)
	err := c.cc.Invoke(ctx, "/linkall.vanus.segment.SegmentServer/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServerClient) Stop(ctx context.Context, in *StopSegmentServerRequest, opts ...grpc.CallOption) (*StopSegmentServerResponse, error) {
	out := new(StopSegmentServerResponse)
	err := c.cc.Invoke(ctx, "/linkall.vanus.segment.SegmentServer/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServerClient) CreateBlock(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/linkall.vanus.segment.SegmentServer/CreateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServerClient) RemoveBlock(ctx context.Context, in *RemoveBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/linkall.vanus.segment.SegmentServer/RemoveBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServerClient) GetBlockInfo(ctx context.Context, in *GetBlockInfoRequest, opts ...grpc.CallOption) (*GetBlockInfoResponse, error) {
	out := new(GetBlockInfoResponse)
	err := c.cc.Invoke(ctx, "/linkall.vanus.segment.SegmentServer/GetBlockInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServerClient) ActivateSegment(ctx context.Context, in *ActivateSegmentRequest, opts ...grpc.CallOption) (*ActivateSegmentResponse, error) {
	out := new(ActivateSegmentResponse)
	err := c.cc.Invoke(ctx, "/linkall.vanus.segment.SegmentServer/ActivateSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServerClient) InactivateSegment(ctx context.Context, in *InactivateSegmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/linkall.vanus.segment.SegmentServer/InactivateSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServerClient) AppendToBlock(ctx context.Context, in *AppendToBlockRequest, opts ...grpc.CallOption) (*AppendToBlockResponse, error) {
	out := new(AppendToBlockResponse)
	err := c.cc.Invoke(ctx, "/linkall.vanus.segment.SegmentServer/AppendToBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServerClient) ReadFromBlock(ctx context.Context, in *ReadFromBlockRequest, opts ...grpc.CallOption) (*ReadFromBlockResponse, error) {
	out := new(ReadFromBlockResponse)
	err := c.cc.Invoke(ctx, "/linkall.vanus.segment.SegmentServer/ReadFromBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServerClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/linkall.vanus.segment.SegmentServer/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SegmentServerServer is the server API for SegmentServer service.
type SegmentServerServer interface {
	Start(context.Context, *StartSegmentServerRequest) (*StartSegmentServerResponse, error)
	Stop(context.Context, *StopSegmentServerRequest) (*StopSegmentServerResponse, error)
	CreateBlock(context.Context, *CreateBlockRequest) (*emptypb.Empty, error)
	RemoveBlock(context.Context, *RemoveBlockRequest) (*emptypb.Empty, error)
	GetBlockInfo(context.Context, *GetBlockInfoRequest) (*GetBlockInfoResponse, error)
	ActivateSegment(context.Context, *ActivateSegmentRequest) (*ActivateSegmentResponse, error)
	InactivateSegment(context.Context, *InactivateSegmentRequest) (*emptypb.Empty, error)
	AppendToBlock(context.Context, *AppendToBlockRequest) (*AppendToBlockResponse, error)
	ReadFromBlock(context.Context, *ReadFromBlockRequest) (*ReadFromBlockResponse, error)
	Status(context.Context, *emptypb.Empty) (*StatusResponse, error)
}

// UnimplementedSegmentServerServer can be embedded to have forward compatible implementations.
type UnimplementedSegmentServerServer struct {
}

func (*UnimplementedSegmentServerServer) Start(context.Context, *StartSegmentServerRequest) (*StartSegmentServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedSegmentServerServer) Stop(context.Context, *StopSegmentServerRequest) (*StopSegmentServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedSegmentServerServer) CreateBlock(context.Context, *CreateBlockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlock not implemented")
}
func (*UnimplementedSegmentServerServer) RemoveBlock(context.Context, *RemoveBlockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlock not implemented")
}
func (*UnimplementedSegmentServerServer) GetBlockInfo(context.Context, *GetBlockInfoRequest) (*GetBlockInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockInfo not implemented")
}
func (*UnimplementedSegmentServerServer) ActivateSegment(context.Context, *ActivateSegmentRequest) (*ActivateSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateSegment not implemented")
}
func (*UnimplementedSegmentServerServer) InactivateSegment(context.Context, *InactivateSegmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InactivateSegment not implemented")
}
func (*UnimplementedSegmentServerServer) AppendToBlock(context.Context, *AppendToBlockRequest) (*AppendToBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendToBlock not implemented")
}
func (*UnimplementedSegmentServerServer) ReadFromBlock(context.Context, *ReadFromBlockRequest) (*ReadFromBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFromBlock not implemented")
}
func (*UnimplementedSegmentServerServer) Status(context.Context, *emptypb.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterSegmentServerServer(s *grpc.Server, srv SegmentServerServer) {
	s.RegisterService(&_SegmentServer_serviceDesc, srv)
}

func _SegmentServer_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSegmentServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linkall.vanus.segment.SegmentServer/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServerServer).Start(ctx, req.(*StartSegmentServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentServer_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSegmentServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linkall.vanus.segment.SegmentServer/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServerServer).Stop(ctx, req.(*StopSegmentServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentServer_CreateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServerServer).CreateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linkall.vanus.segment.SegmentServer/CreateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServerServer).CreateBlock(ctx, req.(*CreateBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentServer_RemoveBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServerServer).RemoveBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linkall.vanus.segment.SegmentServer/RemoveBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServerServer).RemoveBlock(ctx, req.(*RemoveBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentServer_GetBlockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServerServer).GetBlockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linkall.vanus.segment.SegmentServer/GetBlockInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServerServer).GetBlockInfo(ctx, req.(*GetBlockInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentServer_ActivateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServerServer).ActivateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linkall.vanus.segment.SegmentServer/ActivateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServerServer).ActivateSegment(ctx, req.(*ActivateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentServer_InactivateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InactivateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServerServer).InactivateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linkall.vanus.segment.SegmentServer/InactivateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServerServer).InactivateSegment(ctx, req.(*InactivateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentServer_AppendToBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendToBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServerServer).AppendToBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linkall.vanus.segment.SegmentServer/AppendToBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServerServer).AppendToBlock(ctx, req.(*AppendToBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentServer_ReadFromBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFromBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServerServer).ReadFromBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linkall.vanus.segment.SegmentServer/ReadFromBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServerServer).ReadFromBlock(ctx, req.(*ReadFromBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentServer_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linkall.vanus.segment.SegmentServer/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServerServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SegmentServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "linkall.vanus.segment.SegmentServer",
	HandlerType: (*SegmentServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _SegmentServer_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _SegmentServer_Stop_Handler,
		},
		{
			MethodName: "CreateBlock",
			Handler:    _SegmentServer_CreateBlock_Handler,
		},
		{
			MethodName: "RemoveBlock",
			Handler:    _SegmentServer_RemoveBlock_Handler,
		},
		{
			MethodName: "GetBlockInfo",
			Handler:    _SegmentServer_GetBlockInfo_Handler,
		},
		{
			MethodName: "ActivateSegment",
			Handler:    _SegmentServer_ActivateSegment_Handler,
		},
		{
			MethodName: "InactivateSegment",
			Handler:    _SegmentServer_InactivateSegment_Handler,
		},
		{
			MethodName: "AppendToBlock",
			Handler:    _SegmentServer_AppendToBlock_Handler,
		},
		{
			MethodName: "ReadFromBlock",
			Handler:    _SegmentServer_ReadFromBlock_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _SegmentServer_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "segment.proto",
}
